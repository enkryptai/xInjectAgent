[
    {
        "tool_name": "TerminalExecute",
        "summary": "Execute a terminal command and return the output. This command should follow proper syntax and be supported by the terminal environment.",
        "parameters": [
            {
                "name": "command",
                "type": "string",
                "description": "The command to execute in the terminal.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "output",
                "type": "string",
                "description": "The output generated by the executed terminal command, including both standard output and standard error streams."
            },
            {
                "name": "exit_code",
                "type": "integer",
                "description": "The exit code returned by the executed command. A zero value indicates successful execution, while non-zero values indicate errors or exceptions."
            }
        ]
    },
    {
        "tool_name": "GmailSendEmail",
        "summary": "Send an email to one or multiple recipients, with optional scheduling, cc, and bcc.",
        "parameters": [
            {
                "name": "to",
                "type": "string",
                "description": "A string of email addresses to send to, separated by commas.",
                "required": true
            },
            {
                "name": "subject",
                "type": "string",
                "description": "The subject of the email.",
                "required": true
            },
            {
                "name": "body",
                "type": "string",
                "description": "The body of the email.",
                "required": true
            },
            {
                "name": "cc",
                "type": "string",
                "description": "A string of email addresses to carbon copy (CC) to, separated by commas.",
                "required": false
            },
            {
                "name": "bcc",
                "type": "string",
                "description": "A string of email addresses to blind carbon copy (BCC) to, separated by commas.",
                "required": false
            },
            {
                "name": "send_at",
                "type": "string",
                "description": "The scheduled date and time to send the email in the format 'YYYY-MM-DD HH:mm'.",
                "required": false
            },
            {
                "name": "attachments",
                "type": "array",
                "description": "An array of local file paths of attachments.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "An boolean value indicating whether the email was sent successfully."
            }
        ]
    },
    {
        "tool_name": "GmailSearchEmails",
        "summary": "Search for emails based on keywords, folders, labels, date range, or sender and recipient. If certain arguments are not provided, the corresponding filters are not applied.",
        "parameters": [
            {
                "name": "keywords",
                "type": "array",
                "description": "The list of keywords to search for.",
                "required": false
            },
            {
                "name": "folders",
                "type": "array",
                "description": "The list of folders to search for. Each value should be a valid folder such as 'inbox', 'sent', 'drafts', or 'spam'.",
                "required": false
            },
            {
                "name": "limit",
                "type": "integer",
                "description": "The maximum number of emails to retrieve. Default is 5.",
                "required": false
            },
            {
                "name": "date_range",
                "type": "object",
                "description": "An object containing 'start_date' and 'end_date' in the format 'YYYY-MM-DD' to filter emails by date range.",
                "required": false
            },
            {
                "name": "from",
                "type": "string",
                "description": "The sender's email address to filter emails by.",
                "required": false
            },
            {
                "name": "to",
                "type": "string",
                "description": "The recipient's email address to filter emails by.",
                "required": false
            },
            {
                "name": "labels",
                "type": "array",
                "description": "The list of labels to filter emails by, e.g. 'important'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "emails",
                "type": "array",
                "description": "An array of at most 'limit' emails that match the search criteria, each containing the 'id', 'subject', 'from', 'to', and 'timestamp' (in the format 'YYYY-MM-DD HH:mm') of the email."
            }
        ]
    },
    {
        "tool_name": "GmailReadEmail",
        "summary": "Read the content of an email, including attachments.",
        "parameters": [
            {
                "name": "email_id",
                "type": "string",
                "description": "The unique identifier of the email.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "from",
                "type": "string",
                "description": "The email address the email was sent from."
            },
            {
                "name": "to",
                "type": "string",
                "description": "A string of email addresses that the email was sent to, separated by commas."
            },
            {
                "name": "cc",
                "type": "string",
                "description": "A string of email addresses that the email was cc'ed to, separated by commas."
            },
            {
                "name": "bcc",
                "type": "string",
                "description": "A string of email addresses that the email was bcc'ed to, separated by commas."
            },
            {
                "name": "subject",
                "type": "string",
                "description": "The subject of the email."
            },
            {
                "name": "body",
                "type": "string",
                "description": "The body of the email."
            },
            {
                "name": "timestamp",
                "type": "string",
                "description": "The timestamp of when the email was sent (YYYY-MM-DD hh:mm:ss)."
            },
            {
                "name": "folder",
                "type": "string",
                "description": "The folder the email is in, such as 'inbox', 'sent', 'drafts', or 'spam'."
            },
            {
                "name": "labels",
                "type": "array",
                "description": "The labels of the email (e.g., `important`)."
            },
            {
                "name": "attachments",
                "type": "array",
                "description": "An array of objects with attachment names and ids (attachment_id)."
            }
        ]
    },
    {
        "tool_name": "GmailOrganizeEmail",
        "summary": "Move an email to a specific folder or update its labels.",
        "parameters": [
            {
                "name": "email_id",
                "type": "string",
                "description": "The unique identifier of the email.",
                "required": true
            },
            {
                "name": "folder",
                "type": "string",
                "description": "The folder to move the email to, such as 'inbox', 'sent', 'drafts', or 'spam'.",
                "required": false
            },
            {
                "name": "labels",
                "type": "array",
                "description": "A list of updated labels of the email, e.g. 'important'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "A boolean indicating whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "GmailDeleteEmails",
        "summary": "Delete one or multiple emails from the mailbox.",
        "parameters": [
            {
                "name": "email_ids",
                "type": "array",
                "description": "An array of unique identifiers of the emails to be deleted.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "A boolean indicating whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "GmailAddOrUpdateContact",
        "summary": "Add a new contact to the contact list or update an existing contact's information.",
        "parameters": [
            {
                "name": "contact_id",
                "type": "string",
                "description": "The unique identifier of the contact. If not provided, a new contact will be added.",
                "required": false
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the contact. Required when 'contact_id' is not provided.",
                "required": false
            },
            {
                "name": "email",
                "type": "string",
                "description": "The email address of the contact. Required when 'contact_id' is not provided.",
                "required": false
            },
            {
                "name": "remark",
                "type": "string",
                "description": "An optional remark or label for the contact.",
                "required": false
            },
            {
                "name": "info",
                "type": "object",
                "description": "An object containing additional contact information, such as 'phone' and 'address'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "contact_id",
                "type": "string",
                "description": "The unique identifier of the added or updated contact."
            }
        ]
    },
    {
        "tool_name": "GmailDeleteContact",
        "summary": "Delete a contact from the contact list.",
        "parameters": [
            {
                "name": "contact_id",
                "type": "string",
                "description": "The unique identifier of the contact.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "A boolean indicating whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "GmailSearchContacts",
        "summary": "Search for contacts based on filters. If certain arguments are not provided, the corresponding filters are not applied.",
        "parameters": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the contact to search for.",
                "required": false
            },
            {
                "name": "email",
                "type": "string",
                "description": "The email of the contact to search for.",
                "required": false
            },
            {
                "name": "remark",
                "type": "string",
                "description": "The remark of the contact to search for.",
                "required": false
            },
            {
                "name": "limit",
                "type": "integer",
                "description": "The maximum number of search results to return. Default is 5.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "contacts",
                "type": "array",
                "description": "An array of contact objects containing contact information, each object includes 'contact_id', 'name', 'email', 'remark', and 'info'."
            }
        ]
    },
    {
        "tool_name": "GmailDownloadAttachment",
        "summary": "Download attachments using their ids.",
        "parameters": [
            {
                "name": "attachment_ids",
                "type": "array",
                "description": "The unique identifiers of the attachments.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "attachment_paths",
                "type": "array",
                "description": "The local file paths of the downloaded attachments."
            }
        ]
    },
    {
        "tool_name": "GoogleCalendarCreateOrUpdateEvent",
        "summary": "Create a new event or update an existing event in the calendar.",
        "parameters": [
            {
                "name": "event_id",
                "type": "string",
                "description": "The unique identifier of the event to be updated. If not provided, a new event will be created.",
                "required": false
            },
            {
                "name": "event_name",
                "type": "string",
                "description": "The name of the event. Required when creating a new event.",
                "required": false
            },
            {
                "name": "content",
                "type": "string",
                "description": "The content of the event.",
                "required": false
            },
            {
                "name": "start_time",
                "type": "string",
                "description": "The start time of the event in ISO 8601 format. Required when creating a new event.",
                "required": false
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "The end time of the event in ISO 8601 format. Required when creating a new event.",
                "required": false
            },
            {
                "name": "timezone",
                "type": "string",
                "description": "The timezone of the event, e.g. UTC-04:00.",
                "required": false
            },
            {
                "name": "location",
                "type": "string",
                "description": "The location of the event.",
                "required": false
            },
            {
                "name": "attendees",
                "type": "array",
                "description": "An array of email addresses of the attendees.",
                "required": false
            },
            {
                "name": "recurrence",
                "type": "string",
                "description": "The recurrence of the event in Google Calendar format. For instance, use `RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO` to set the event to repeat every week on Monday.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "event_id",
                "type": "string",
                "description": "The unique identifier of the created or updated event."
            }
        ]
    },
    {
        "tool_name": "GoogleCalendarDeleteEvents",
        "summary": "Delete a list of events from the calendar.",
        "parameters": [
            {
                "name": "event_ids",
                "type": "array",
                "description": "The unique identifiers of the events to be deleted.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the events was successfully deleted."
            }
        ]
    },
    {
        "tool_name": "GoogleCalendarReadEvents",
        "summary": "Read events by event_ids.",
        "parameters": [
            {
                "name": "event_ids",
                "type": "array",
                "description": "An array of unique event identifiers to read events.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "event_details",
                "type": "array",
                "description": "An array of objects, each containing the details of an event, including event_id, event_name, content, start_time, end_time, timezone, location, organizer, attendees, and recurrence."
            }
        ]
    },
    {
        "tool_name": "GoogleCalendarSearchEvents",
        "summary": "Search events by keywords, date range, or attendees. If certain arguments are not provided, the corresponding filters are not applied.",
        "parameters": [
            {
                "name": "keywords",
                "type": "array",
                "description": "A list of keywords to search for.",
                "required": false
            },
            {
                "name": "start_date",
                "type": "string",
                "description": "The start date of the date range in ISO 8601 format.",
                "required": false
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "The end date of the date range in ISO 8601 format.",
                "required": false
            },
            {
                "name": "attendees",
                "type": "array",
                "description": "An array of email addresses of the attendees to search for.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "event_ids",
                "type": "array",
                "description": "An array of unique identifiers of the searched events."
            }
        ]
    },
    {
        "tool_name": "GoogleCalendarSendInvitations",
        "summary": "Send event invitations to attendees.",
        "parameters": [
            {
                "name": "event_id",
                "type": "string",
                "description": "The unique identifier of the event.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the invitations were successfully sent."
            }
        ]
    },
    {
        "tool_name": "GoogleCalendarSetReminder",
        "summary": "Set or update a reminder for an event.",
        "parameters": [
            {
                "name": "event_id",
                "type": "string",
                "description": "The unique identifier of the event.",
                "required": true
            },
            {
                "name": "reminder_time",
                "type": "string",
                "description": "The reminder time in ISO 8601 format.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the reminder was successfully set."
            }
        ]
    },
    {
        "tool_name": "GoogleCalendarGetEventsFromSharedCalendar",
        "summary": "Get events from other users' shared calendar.",
        "parameters": [
            {
                "name": "email",
                "type": "string",
                "description": "The email of the user who shared the calendar.",
                "required": true
            },
            {
                "name": "start_date",
                "type": "string",
                "description": "The start date to retrieve events in ISO 8601 format.",
                "required": true
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "The end date to retrieve events in ISO 8601 format.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "event_blocks",
                "type": "array",
                "description": "An array of objects containing the event blocks without any details, each containing the event_name ('busy'), start_time, and end_time. It is an empty array if the user of the specified email address does not share their calendar."
            }
        ]
    },
    {
        "tool_name": "BankManagerGetAccountInformation",
        "summary": "Retrieve information (e.g., account number or balance) about an account that belongs to the User. ",
        "parameters": [
            {
                "name": "account_type",
                "type": "string",
                "description": "The account type, one of ['checking', 'savings', 'mutual fund TFSA', 'mutual fund non-registered', 'self-directed TFSA', 'self-directed non-registered', 'mortgage', 'credit_card'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "accounts",
                "type": "array",
                "description": "A list of objects containing information about accounts of the specified account type, including details like account number (in the format 'XXX-XXXX-XXXX'), type, balance, and status. Additionaly, if the account is a TFSA account, then this field also contains the remaining contribution room."
            }
        ]
    },
    {
        "tool_name": "BankManagerTransferFunds",
        "summary": "Transfer funds between two accounts.",
        "parameters": [
            {
                "name": "from_account_number",
                "type": "string",
                "description": "The user's bank account number to transfer funds from, in the format 'XXX-XXXX-XXXX'.",
                "required": true
            },
            {
                "name": "to_account_number",
                "type": "string",
                "description": "The bank account number to transfer funds to, in the format 'XXX-XXXX-XXXX'.",
                "required": true
            },
            {
                "name": "amount",
                "type": "number",
                "description": "The amount to transfer, must be positive.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the transfer was successful."
            }
        ]
    },
    {
        "tool_name": "BankManagerSearchPayee",
        "summary": "Search for a payee by keywords.",
        "parameters": [
            {
                "name": "keywords",
                "type": "array",
                "description": "A list of keywords to search for in the payee name.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "payees",
                "type": "array",
                "description": "A list of dictionaries containing the payee_id (in the format 'P-XXXXXX') and payee_name of each matching payee."
            }
        ]
    },
    {
        "tool_name": "BankManagerPayBill",
        "summary": "Pay a bill to a specified payee with your service acccount number.",
        "parameters": [
            {
                "name": "from_account_number",
                "type": "string",
                "description": "The user's bank account number used for paying the bill in the format 'XXX-XXXX-XXXX'.",
                "required": true
            },
            {
                "name": "payee_id",
                "type": "string",
                "description": "The unique identifier of the payee in the format 'P-XXXXXX'.",
                "required": true
            },
            {
                "name": "service_account_number",
                "type": "string",
                "description": "Your account number assigned by the service provider, which helps the provider identify transactions related to that specific customer.",
                "required": true
            },
            {
                "name": "payment_date",
                "type": "string",
                "description": "The date the payment should be paid, in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "amount",
                "type": "number",
                "description": "The amount to pay, must be positive.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the bill payment was successful."
            }
        ]
    },
    {
        "tool_name": "BankManagerGetAccountStatement",
        "summary": "Retrieve an account statement for a specified period.",
        "parameters": [
            {
                "name": "account_number",
                "type": "string",
                "description": "The user's bank account number in the format 'XXX-XXXX-XXXX'.",
                "required": true
            },
            {
                "name": "start_date",
                "type": "string",
                "description": "The start date of the transaction history in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "The end date of the transaction history in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "download",
                "type": "boolean",
                "description": "Whether to download the statement as a CSV file. Default is false.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "transactions",
                "type": "array",
                "description": "A list of dictionaries containing the date, description, amount, and balance of each transaction."
            },
            {
                "name": "statement_file_path",
                "type": "string",
                "description": "The file path of the downloaded statement file. When 'download' is false, this is an empty string."
            }
        ]
    },
    {
        "tool_name": "BankManagerSearchTransactions",
        "summary": "Search transactions by keyword or amount range. If certain arguments are not provided, the corresponding filters are not applied.",
        "parameters": [
            {
                "name": "account_number",
                "type": "string",
                "description": "The account number in the format 'XXX-XXXX-XXXX'.",
                "required": true
            },
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword to search for in the transaction description.",
                "required": false
            },
            {
                "name": "min_amount",
                "type": "number",
                "description": "The minimum transaction amount to search for.",
                "required": false
            },
            {
                "name": "max_amount",
                "type": "number",
                "description": "The maximum transaction amount to search for.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "transactions",
                "type": "array",
                "description": "A list of dictionaries containing the date, description, amount, and balance of each matching transaction."
            }
        ]
    },
    {
        "tool_name": "AmazonSearchProducts",
        "summary": "Search for products based on keywords.",
        "parameters": [
            {
                "name": "search_keywords",
                "type": "array",
                "description": "A list of keywords to search for in the product name.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of search results to return. Default is 5, maximum is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "products",
                "type": "array",
                "description": "A list of objects containing the keys 'product_id' (string), 'name' (string), 'description' (string) and 'price' (number). The 'product_id' is a unique identifier of the product."
            }
        ]
    },
    {
        "tool_name": "AmazonGetProductDetails",
        "summary": "Retrieve detailed information about a product.",
        "parameters": [
            {
                "name": "product_id",
                "type": "string",
                "description": "The unique identifier of the product.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "product_details",
                "type": "object",
                "description": "An object containing 'name' (string), 'description' (string), 'price' (number), 'rating' (integer from 0 to 5), and 'reviews' (an array of objects, each object contains 'reviewer_name' (string), 'review_date' (string, format: 'YYYY-MM-DD'), 'review_content' (string))."
            }
        ]
    },
    {
        "tool_name": "AmazonAddToCart",
        "summary": "Add a product to the shopping cart.",
        "parameters": [
            {
                "name": "product_id",
                "type": "string",
                "description": "The unique identifier of the product.",
                "required": true
            },
            {
                "name": "quantity",
                "type": "integer",
                "description": "The quantity of the product to add.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the addition was successful."
            }
        ]
    },
    {
        "tool_name": "AmazonViewCart",
        "summary": "View the contents of the shopping cart.",
        "parameters": [],
        "returns": [
            {
                "name": "cart_contents",
                "type": "array",
                "description": "A list of objects, each containing 'product_id' (string), 'product_name' (string), 'quantity' (integer), 'price' (number), and 'subtotal' (number, in USD)."
            },
            {
                "name": "total_price",
                "type": "number",
                "description": "The total price of the shopping cart, in USD."
            }
        ]
    },
    {
        "tool_name": "AmazonRemoveFromCart",
        "summary": "Remove a list of products from the shopping cart entirely, regardless of the quantity.",
        "parameters": [
            {
                "name": "product_ids",
                "type": "array",
                "description": "The unique identifiers of the products to remove.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the removal was successful."
            }
        ]
    },
    {
        "tool_name": "AmazonPlaceOrder",
        "summary": "Place an order for the products in the shopping cart, using the specified shipping address and payment method. The shopping cart is emptied after the order is placed.",
        "parameters": [
            {
                "name": "shipping_address",
                "type": "object",
                "description": "The shipping address, containing 'name' (string), 'phone_number' (string) and 'address' (string).",
                "required": true
            },
            {
                "name": "payment_method",
                "type": "object",
                "description": "The payment method, containing 'card_number' (string), 'expiry_date' (string, format: 'MM/YY'), 'cvv' (string).",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "order_id",
                "type": "string",
                "description": "The unique identifier of the placed order."
            },
            {
                "name": "total_price",
                "type": "string",
                "description": "The total price of the order, in USD."
            },
            {
                "name": "order_contents",
                "type": "array",
                "description": "A list of objects, each containing 'product_id' (string), 'product_name' (string), 'quantity' (integer) and 'subtotal' (string, in USD)."
            }
        ]
    },
    {
        "tool_name": "AmazonSearchOrderHistory",
        "summary": "Search the user's order history.",
        "parameters": [
            {
                "name": "search_keywords",
                "type": "array",
                "description": "A list of keywords to search for in the order history.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of search results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "orders",
                "type": "array",
                "description": "A list of objects, each containing 'order_id', 'order_timestamp' (format: 'YYYY-MM-DD:HH:MM:SS'), 'order_status' (one of ['pending', 'shipped', 'delivered'])."
            }
        ]
    },
    {
        "tool_name": "AmazonViewOrderDetails",
        "summary": "View the details of an order, including shipment and payment information.",
        "parameters": [
            {
                "name": "order_id",
                "type": "string",
                "description": "The unique identifier of the order.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "order_timestamp",
                "type": "string",
                "description": "The time the order was placed. Format: 'YYYY-MM-DD:HH:MM:SS'."
            },
            {
                "name": "order_status",
                "type": "string",
                "description": "The status of the order, one of ['pending', 'shipped', 'delivered']."
            },
            {
                "name": "order_contents",
                "type": "array",
                "description": "A list of objects, each containing 'product_id', 'product_name' and 'quantity'."
            },
            {
                "name": "shipment_details",
                "type": "object",
                "description": "An object containing 'tracking_number', 'carrier', 'arrival_date' (for delivered orders) or 'estimated_arrival_date' (for pending or shipped orders), and 'shipping_address'."
            },
            {
                "name": "payment_details",
                "type": "object",
                "description": "An object containing 'card_number', and 'amount_paid'."
            }
        ]
    },
    {
        "tool_name": "AmazonManageWishlist",
        "summary": "Add, remove, or view items in the user's wish list.",
        "parameters": [
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform, one of ['add', 'remove', 'view'].",
                "required": true
            },
            {
                "name": "product_id",
                "type": "string",
                "description": "The unique identifier of the product, needed for 'add' and 'remove' actions.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "An object containing 'success' (boolean) indicating whether the action was successful, and 'wishlist_contents' (array of objects, each object contains the product identifiers and name in the wishlist, only for 'view' action)."
            }
        ]
    },
    {
        "tool_name": "AmazonViewSavedAddresses",
        "summary": "View the user's saved addresses.",
        "parameters": [],
        "returns": [
            {
                "name": "addresses",
                "type": "array",
                "description": "A list of objects, each containing 'remark', 'name', 'phone_number' and 'address'."
            }
        ]
    },
    {
        "tool_name": "AmazonViewSavedPaymentMethods",
        "summary": "View the user's saved payment methods.",
        "parameters": [],
        "returns": [
            {
                "name": "payment_methods",
                "type": "array",
                "description": "A list of objects, each containing 'card_number', 'expiry_date', 'cvv'."
            }
        ]
    },
    {
        "tool_name": "AmazonPostReview",
        "summary": "Post a review for a previous product that was purchased.",
        "parameters": [
            {
                "name": "product_id",
                "type": "string",
                "description": "The unique identifier of the product.",
                "required": true
            },
            {
                "name": "review",
                "type": "string",
                "description": "The public review to post.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the review was successfully posted."
            }
        ]
    },
    {
        "tool_name": "ExpediaSearchFlights",
        "summary": "Search for available flights based on origin, destination, and departure date. Optionally, return flights can be searched for by providing a return date.",
        "parameters": [
            {
                "name": "origin",
                "type": "string",
                "description": "The departure location, should be a valid airport code or city name.",
                "required": true
            },
            {
                "name": "destination",
                "type": "string",
                "description": "The arrival location, should be a valid airport code or city name.",
                "required": true
            },
            {
                "name": "departure_date",
                "type": "string",
                "description": "The departure date in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "return_date",
                "type": "string",
                "description": "The return date in the format 'YYYY-MM-DD'.",
                "required": false
            },
            {
                "name": "travellers",
                "type": "object",
                "description": "An object containing fields adults (integer), children (integer), infants (integer).",
                "required": true
            },
            {
                "name": "travel_class",
                "type": "string",
                "description": "The travel class, possible values: 'economy', 'premium_economy', 'business', 'first_class'.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 5, maximum is 10.",
                "required": false
            },
            {
                "name": "filters",
                "type": "object",
                "description": "An object containing optional fields min_price (number), max_price (number), stops_filter (array of strings, each string is a allowed stop type, possible values: 'direct', '1_stop', '2_plus_stops'), airline (string), departure_time (string, one of ['morning', 'afternoon', 'evening']), arrival_time (string, one of ['morning', 'afternoon', 'evening']). Default is no filters.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "flight_options",
                "type": "array",
                "description": "A list of objects, each object contains option_id (string, starts with 'outbound' or 'return'), airline (string), flight_numbers (array of strings), departure_airport (string, the airport code), departure_time (string, format: 'YYYY-MM-DD:HH:MM'), arrival_airport (string, the airport code), arrival_time (string, format: 'YYYY-MM-DD:HH:MM'), duration (string, format: 'HH:MM'), stops (integer), layovers (array of strings, each string is an airport code with the layover duration in format 'HH:MM'), price (number, in USD), additional_information (object, containing additional information such as baggage allowance, change fees, cancellation fees, etc.). At most `max_results` flights are returned."
            }
        ]
    },
    {
        "tool_name": "ExpediaGetFlightDetails",
        "summary": "Retrieve detailed information for a specific flight using its unique number and departure date.",
        "parameters": [
            {
                "name": "departure_date",
                "type": "string",
                "description": "The departure date in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "flight_number",
                "type": "string",
                "description": "The flight number used to identify the flight, e.g. 'AC 123'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "flight_details",
                "type": "object",
                "description": "An object containing airline (string), departure_airport (string, the airport code), departure_time (string, format: 'YYYY-MM-DD:HH:MM'), arrival_airport (string, the airport code), arrival_time (string, format: 'YYYY-MM-DD:HH:MM'), duration (string, format: 'HH:MM'), aircraft_type (string), aircraft_age (integer)."
            }
        ]
    },
    {
        "tool_name": "ExpediaSearchAccommodations",
        "summary": "Search for available accommodations based on city, location, check-in date, check-out date, and guests.",
        "parameters": [
            {
                "name": "city",
                "type": "string",
                "description": "The city of the accommodation.",
                "required": true
            },
            {
                "name": "location",
                "type": "string",
                "description": "The location of the accommodation.",
                "required": false
            },
            {
                "name": "check_in_date",
                "type": "string",
                "description": "The check-in date in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "check_out_date",
                "type": "string",
                "description": "The check-out date in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "guests",
                "type": "array",
                "description": "An array of objects, each object contains adults (integer), children (integer).",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 5, maximum is 10.",
                "required": false
            },
            {
                "name": "filters",
                "type": "object",
                "description": "An object containing optional fields min_price (number), max_price (number), accommodation_type (string), room_type (string), min_rating (number), free_cancellation (boolean), free_breakfast (boolean), allow_smoking (boolean), allow_pets (boolean). Default is no filters.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "accommodation_options",
                "type": "array",
                "description": "A list of objects, each object contains option_id (string, starts with 'acc'), name (string), address (string), rating (number), total_price (number, in USD), free_cancellation (boolean), free_breakfast (boolean), allow_smoking (boolean), allow_pets (boolean), additional_information (object, containing additional information such as amenities). At most `max_results` accommodations are returned."
            }
        ]
    },
    {
        "tool_name": "ExpediaBooking",
        "summary": "Book flight or accommodation options using user-provided details and payment information.",
        "parameters": [
            {
                "name": "option_ids",
                "type": "array",
                "description": "An non-empty array of unique identifiers of the options to book. The options must be of the same type, either all flights or all accommodations.",
                "required": true
            },
            {
                "name": "payment_method",
                "type": "object",
                "description": "An object containing payment information including card number, expiry date, and CVV.",
                "required": true
            },
            {
                "name": "travellers",
                "type": "array",
                "description": "An array of objects, each object contains name (string), date_of_birth (string, format: 'YYYY-MM-DD'), passport_number (string), passport_expiry_date (string, format: 'YYYY-MM-DD'). Only required for flight booking.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "booking_results",
                "type": "object",
                "description": "An object indicates the booking results, including success (boolean). If success is true, the object also contains reservation_id (string), reservation_type (string, one of ['flight', 'accommodation']), total_price (number, in USD)."
            }
        ]
    },
    {
        "tool_name": "ExpediaSearchReservations",
        "summary": "Search for existing flight or accommodation reservations based on reservation type, query string, start date, and end date. The query string is searched for in the reservation details.",
        "parameters": [
            {
                "name": "reservation_type",
                "type": "string",
                "description": "The type of reservation, possible values: 'flight', 'accommodation'.",
                "required": true
            },
            {
                "name": "query",
                "type": "string",
                "description": "The query string to search for in the reservation details.",
                "required": true
            },
            {
                "name": "start_date",
                "type": "string",
                "description": "The start date of the reserved flight or accommodation in the format 'YYYY-MM-DD'.",
                "required": false
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "The end date of the reserved flight or accommodation in the format 'YYYY-MM-DD'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 5.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "reservations",
                "type": "array",
                "description": "A list of objects, each object contains 'reservation_id' (string), 'booking_timestamp' (string, format: 'YYYY-MM-DD:HH:MM:SS'), 'reservation_status' (string, one of ['confirmed', 'cancelled']), 'total_price' (number, in USD), 'refundable_amount' (number, in USD), 'additional_information' (object, containing additional information such as flight or accommodation details). At most `max_results` reservations are returned."
            }
        ]
    },
    {
        "tool_name": "ExpediaCancelReservations",
        "summary": "Cancel a list of existing flight or accommodation reservation and process any applicable refunds.",
        "parameters": [
            {
                "name": "reservation_ids",
                "type": "array",
                "description": "An array of unique identifiers of the reservations to cancel.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the cancellation was successful."
            }
        ]
    },
    {
        "tool_name": "ExpediaRetrieveSavedInformation",
        "summary": "Retrieve user's saved payment methods or people information.",
        "parameters": [
            {
                "name": "information_type",
                "type": "string",
                "description": "The type of information, must be one of ['payments', 'people'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "retrieved_information",
                "type": "array",
                "description": "If the 'information_type' is 'payments', the returned array contains objects, each object contains remark, card number, expiry date, and CVV. If the 'information_type' is 'people', the returned array contains objects, each object contains remark, name, date_of_birth, passport_number and passport_expiry_date."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerPostTweet",
        "summary": "Post a new tweet to the user's timeline.",
        "parameters": [
            {
                "name": "content",
                "type": "string",
                "description": "The content of the tweet, max length 280 characters.",
                "required": true
            },
            {
                "name": "media_paths",
                "type": "array",
                "description": "An optional list of media file paths to attach to the tweet, max 4 items. Each item must be a valid image or video file path in the local file system.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "tweet_id",
                "type": "string",
                "description": "The unique identifier of the posted tweet."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerSearchTweets",
        "summary": "Search for user's own tweets or public tweets containing specific keywords or hashtags.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The query string to search for in tweets.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return, default is 10.",
                "required": false
            },
            {
                "name": "own_tweets",
                "type": "boolean",
                "description": "Whether to search only the user's own tweets, default is false.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "tweets",
                "type": "array",
                "description": "A list of objects containing the 'tweet_id', 'user_id', 'content', and 'timestamp' of each matching tweet."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerReadTweet",
        "summary": "Read the content of a specific tweet by its ID.",
        "parameters": [
            {
                "name": "tweet_id",
                "type": "string",
                "description": "The unique identifier of the tweet to read.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "tweet",
                "type": "object",
                "description": "An object containing the 'tweet_id', 'user_id', 'content', and 'timestamp' of the specified tweet."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerDeleteTweets",
        "summary": "Delete a tweet by its ID.",
        "parameters": [
            {
                "name": "tweet_ids",
                "type": "array",
                "description": "An array of unique identifiers of the tweets to delete.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the tweet was successfully deleted."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerFollowUsers",
        "summary": "Follow other users by their IDs.",
        "parameters": [
            {
                "name": "user_ids",
                "type": "array",
                "description": "An array of unique identifiers of the users to follow.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the users was successfully followed."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerUnfollowUsers",
        "summary": "Unfollow other users by their IDs.",
        "parameters": [
            {
                "name": "user_ids",
                "type": "array",
                "description": "An array of unique identifiers of the users to unfollow.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the users were successfully unfollowed."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerGetUserProfile",
        "summary": "Retrieve the user's own profile or another user's profile information by their ID.",
        "parameters": [
            {
                "name": "user_id",
                "type": "string",
                "description": "The unique identifier of the user to retrieve the profile information for. If not provided, return own profile.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "profile",
                "type": "object",
                "description": "An object containing the 'user_id', 'user_name', 'display_name', and 'bio' of the specified user."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerLikeTweet",
        "summary": "Like a tweet by its ID.",
        "parameters": [
            {
                "name": "tweet_id",
                "type": "string",
                "description": "The unique identifier of the tweet to like.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the tweet was successfully liked."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerUnlikeTweet",
        "summary": "Undo like a tweet by its ID.",
        "parameters": [
            {
                "name": "tweet_id",
                "type": "string",
                "description": "The unique identifier of the tweet to undo like.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the tweet was successfully unliked."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerRetweet",
        "summary": "Retweet a tweet by its ID.",
        "parameters": [
            {
                "name": "tweet_id",
                "type": "string",
                "description": "The unique identifier of the tweet to retweet.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the tweet was successfully retweeted."
            }
        ]
    },
    {
        "tool_name": "TwitterManagerReplyToTweet",
        "summary": "Reply to a tweet by its ID.",
        "parameters": [
            {
                "name": "tweet_id",
                "type": "string",
                "description": "The unique identifier of the tweet to reply to.",
                "required": true
            },
            {
                "name": "content",
                "type": "string",
                "description": "The content of the reply, max length 280 characters.",
                "required": true
            },
            {
                "name": "media_paths",
                "type": "array",
                "description": "An optional list of media file paths to attach to the tweet, max 4 items. Each item must be a valid image or video file path in the local file system.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "reply_tweet_id",
                "type": "string",
                "description": "The unique identifier of the posted reply tweet."
            }
        ]
    },
    {
        "tool_name": "GoogleHomeSearchDevices",
        "summary": "Searches for smart home devices connected to the user's Google Home.",
        "parameters": [
            {
                "name": "device_type",
                "type": "string",
                "description": "The type of device to search for, e.g., 'light', 'thermostat', etc. If not specified, it returns all connected devices.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "devices",
                "type": "array",
                "description": "A list of devices, each containing 'device_id', 'device_name', 'device_type', and 'device_status' (including its state, settings, etc)."
            }
        ]
    },
    {
        "tool_name": "GoogleHomeListDeviceActions",
        "summary": "Retrieves a list of possible actions that can be performed on a specified smart home device.",
        "parameters": [
            {
                "name": "device_id",
                "type": "string",
                "description": "The unique identifier of the smart home device.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "actions",
                "type": "array",
                "description": "A list of possible actions for the device, each is an object containing 'action_name' (e.g., 'turn on', 'turn off', 'adjust temperature', etc), 'action_description', and 'action_parameters' (a detailed description of the parameters required for the action, with their types, descriptions, and constraints)"
            }
        ]
    },
    {
        "tool_name": "GoogleHomeControlDevice",
        "summary": "Controls a specified smart home device by turning it on/off, adjusting its settings, or performing other actions. The available actions and parameters depend on the device type, which can be retrieved using 'ListDeviceActions'.",
        "parameters": [
            {
                "name": "device_id",
                "type": "string",
                "description": "The unique identifier of the smart home device to control.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the device, etc. Must match the actions returned by 'ListDeviceActions' for the specified device.",
                "required": true
            },
            {
                "name": "parameters",
                "type": "object",
                "description": "Additional parameters for the action. Must match the parameters returned by 'ListDeviceActions' for the specified device.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the action was successfully performed on the device."
            }
        ]
    },
    {
        "tool_name": "GoogleHomeScheduleDeviceAction",
        "summary": "Schedules a specified smart home device to perform an action at a specified date and time.",
        "parameters": [
            {
                "name": "device_id",
                "type": "string",
                "description": "The unique identifier of the smart home device to schedule.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the device. Must match the actions returned by 'ListDeviceActions' for the specified device.",
                "required": true
            },
            {
                "name": "date_time",
                "type": "string",
                "description": "The scheduled date and time for the action, in the format 'YYYY-MM-DD HH:MM'.",
                "required": true
            },
            {
                "name": "parameters",
                "type": "object",
                "description": "Additional parameters for the action. Must match the parameters returned by 'ListDeviceActions' for the specified device.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the action was successfully scheduled."
            }
        ]
    },
    {
        "tool_name": "GoogleHomePlayMedia",
        "summary": "Plays specified media (music, podcasts, etc.) on a connected device.",
        "parameters": [
            {
                "name": "media",
                "type": "string",
                "description": "The media to play, e.g., a song title, podcast name, or radio station.",
                "required": true
            },
            {
                "name": "device_id",
                "type": "string",
                "description": "The unique identifier of the device to play the media on. If not specified, it defaults to the Google Home device.",
                "required": false
            },
            {
                "name": "parameters",
                "type": "object",
                "description": "Additional parameters for the media. Must match the parameters returned by 'ListDeviceActions'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the media was successfully played on the device."
            }
        ]
    },
    {
        "tool_name": "GoogleHomeSetReminder",
        "summary": "Sets a reminder for a specified date and time.",
        "parameters": [
            {
                "name": "reminder_text",
                "type": "string",
                "description": "The text of the reminder.",
                "required": true
            },
            {
                "name": "date_time",
                "type": "string",
                "description": "The date and time for the reminder, in the format 'YYYY-MM-DD HH:MM'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "reminder_id",
                "type": "string",
                "description": "The unique identifier of the created reminder."
            }
        ]
    },
    {
        "tool_name": "GoogleHomeListReminders",
        "summary": "Lists all reminders set on the user's Google Home.",
        "parameters": [],
        "returns": [
            {
                "name": "reminders",
                "type": "array",
                "description": "A list of reminders, each containing 'reminder_id', 'reminder_text', and 'date_time'."
            }
        ]
    },
    {
        "tool_name": "GoogleHomeAskQuestion",
        "summary": "Asks a question and receives an answer from Google Home.",
        "parameters": [
            {
                "name": "question",
                "type": "string",
                "description": "The question to ask.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "answer",
                "type": "string",
                "description": "The answer to the question."
            }
        ]
    },
    {
        "tool_name": "DropboxUploadFile",
        "summary": "Upload a file from the local system to the user's Dropbox account.",
        "parameters": [
            {
                "name": "local_file_path",
                "type": "string",
                "description": "The path of the file on the local system.",
                "required": true
            },
            {
                "name": "cloud_folder_path",
                "type": "string",
                "description": "The cloud folder path in the user's Dropbox account where the file will be uploaded. If not specified, the file will be uploaded to the root folder '/MyDropbox/'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the file was successfully uploaded."
            }
        ]
    },
    {
        "tool_name": "DropboxDownloadFile",
        "summary": "Download a file from the Dropbox to the local system. It could be a file uploaded by the user or a file shared with the user by others.",
        "parameters": [
            {
                "name": "user_cloud_file_path",
                "type": "string",
                "description": "The cloud file path in the user's Dropbox account. Required for downloading a file uploaded by the user.",
                "required": false
            },
            {
                "name": "shared_file_id",
                "type": "string",
                "description": "The unique identifier of the shared file. Required for downloading a file shared with the user by others.",
                "required": false
            },
            {
                "name": "local_destination_folder",
                "type": "string",
                "description": "The path of the folder on the local system where the file will be downloaded; default: the default download folder of the local system.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the file was successfully downloaded."
            },
            {
                "name": "local_file_path",
                "type": "string",
                "description": "The path of the downloaded file on the local system. Empty if the file was not successfully downloaded."
            }
        ]
    },
    {
        "tool_name": "DropboxListFilesAndFolders",
        "summary": "List files and folders in a given folder in the user's Dropbox account.",
        "parameters": [
            {
                "name": "cloud_folder_path",
                "type": "string",
                "description": "The cloud folder path in the user's Dropbox account. If not specified, the root folder '/MyDropbox/' will be used.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of files and folders to return; default: 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "items",
                "type": "array",
                "description": "An array of objects, each with 'id' (the unique identifier of the file or folder), 'name' (the name of the file or folder), and 'type' (the type of the item, either 'file' or 'folder')."
            }
        ]
    },
    {
        "tool_name": "DropboxCreateFolder",
        "summary": "Create a folder in the cloud storage.",
        "parameters": [
            {
                "name": "folder_name",
                "type": "string",
                "description": "The name of the new folder.",
                "required": true
            },
            {
                "name": "parent_folder_path",
                "type": "string",
                "description": "The cloud folder path in the user's Dropbox account where the new folder will be created. If not specified, the new folder will be created in the root folder '/MyDropbox/'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the folder was successfully created."
            }
        ]
    },
    {
        "tool_name": "DropboxShareItem",
        "summary": "Share a file or folder in user's Dropbox account with another user.",
        "parameters": [
            {
                "name": "item_path",
                "type": "string",
                "description": "The cloud file or folder path in the user's Dropbox account to be shared.",
                "required": true
            },
            {
                "name": "recipient_email",
                "type": "string",
                "description": "The email address of the recipient.",
                "required": true
            },
            {
                "name": "access_level",
                "type": "string",
                "description": "The level of access granted to the recipient; valid values: 'view', 'comment', 'edit'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the item was successfully shared."
            }
        ]
    },
    {
        "tool_name": "DropboxDeleteItem",
        "summary": "Delete a file or folder from the user's Dropbox account.",
        "parameters": [
            {
                "name": "item_path",
                "type": "string",
                "description": "The cloud file or folder path in the user's Dropbox account to be deleted.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the file or folder was successfully deleted."
            }
        ]
    },
    {
        "tool_name": "DropboxSearchItems",
        "summary": "Search for files and folders by name or metadata in the user's Dropbox account.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The search query.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of files and folders to return; default: 50.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "items",
                "type": "array",
                "description": "An array of objects, each with 'id' (the unique identifier of the file or folder), 'path' (the path of the file or folder), and 'type' (the type of the item, either 'file' or 'folder')."
            }
        ]
    },
    {
        "tool_name": "DropboxGetItemMetadata",
        "summary": "Get metadata of a file or folder in the user's Dropbox account.",
        "parameters": [
            {
                "name": "item_path",
                "type": "string",
                "description": "The cloud file or folder path in the user's Dropbox account.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "metadata",
                "type": "object",
                "description": "An object with fields such as 'id' (the unique identifier of the file or folder), 'name' (the name of the file or folder), 'type' (the type of the item, either 'file' or 'folder'), 'size' (the size of the file in bytes), 'created_at' (the creation timestamp), 'modified_at' (the last modification timestamp), etc."
            }
        ]
    },
    {
        "tool_name": "DropboxMoveItem",
        "summary": "Move a file or folder to a different folder in the user's Dropbox account.",
        "parameters": [
            {
                "name": "item_path",
                "type": "string",
                "description": "The cloud file or folder path in the user's Dropbox account to be moved.",
                "required": true
            },
            {
                "name": "destination_folder_path",
                "type": "string",
                "description": "The destination folder path in the user's Dropbox account.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the file or folder was successfully moved."
            }
        ]
    },
    {
        "tool_name": "DropboxCreateLink",
        "summary": "Create a shareable link for a file or folder in the cloud storage.",
        "parameters": [
            {
                "name": "item_path",
                "type": "string",
                "description": "The cloud file or folder path in the user's Dropbox account to be shared.",
                "required": true
            },
            {
                "name": "access_level",
                "type": "string",
                "description": "The level of access granted; valid values: 'view', 'comment', 'edit'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "link",
                "type": "string",
                "description": "The shareable link."
            }
        ]
    },
    {
        "tool_name": "DropboxDisableLink",
        "summary": "Disable the shareable link for a file or folder in the cloud storage.",
        "parameters": [
            {
                "name": "item_path",
                "type": "string",
                "description": "The cloud file or folder path in the user's Dropbox account to be unshared.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the link was successfully disabled."
            }
        ]
    },
    {
        "tool_name": "TeladocSearchDoctors",
        "summary": "Search for doctors based on keywords, specialty, location, and a specific date.",
        "parameters": [
            {
                "name": "keywords",
                "type": "string",
                "description": "Keywords to search doctors by, such as name or specialty.",
                "required": false
            },
            {
                "name": "location",
                "type": "string",
                "description": "Location to filter doctors by.",
                "required": false
            },
            {
                "name": "date",
                "type": "string",
                "description": "Date to check doctor's availability in the format 'YYYY-MM-DD'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "doctors",
                "type": "array",
                "description": "A list of doctors with their respective unique identifiers, names, specialties, locations, and available time slots (list of start and end times in the format  'YYYY-MM-DD HH:MM')."
            }
        ]
    },
    {
        "tool_name": "TeladocConsultDoctor",
        "summary": "Start a consultation with a doctor by providing the doctor's unique identifier and reason for consultation.",
        "parameters": [
            {
                "name": "doctor_id",
                "type": "string",
                "description": "The unique identifier of the chosen doctor.",
                "required": true
            },
            {
                "name": "reason",
                "type": "string",
                "description": "Reason for consultation (e.g., 'cold symptoms', 'allergy concerns').",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "consultation_id",
                "type": "string",
                "description": "A unique identifier for the consultation."
            }
        ]
    },
    {
        "tool_name": "TeladocScheduleAppointment",
        "summary": "Schedule an appointment with a doctor by providing the doctor's unique identifier, appointment date and time, and reason for appointment.",
        "parameters": [
            {
                "name": "doctor_id",
                "type": "string",
                "description": "The unique identifier of the chosen doctor.",
                "required": true
            },
            {
                "name": "date",
                "type": "string",
                "description": "Date of the appointment in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "time",
                "type": "string",
                "description": "Time of the appointment in the format 'HH:mm'.",
                "required": true
            },
            {
                "name": "reason",
                "type": "string",
                "description": "Reason for appointment (e.g., 'routine checkup', 'follow-up visit').",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "appointment_id",
                "type": "string",
                "description": "A unique identifier for the appointment if successfully scheduled, otherwise null."
            },
            {
                "name": "success",
                "type": "boolean",
                "description": "A boolean indicating whether the appointment was successfully scheduled."
            }
        ]
    },
    {
        "tool_name": "TeladocManageAppointments",
        "summary": "View, update, or cancel appointments by providing the appointment's unique identifier and any updates or cancellation requests.",
        "parameters": [
            {
                "name": "appointment_id",
                "type": "string",
                "description": "The unique identifier of the appointment.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the appointment ('view', 'update', 'cancel').",
                "required": true
            },
            {
                "name": "date",
                "type": "string",
                "description": "Updated date of the appointment in the format 'YYYY-MM-DD' if action is 'update'.",
                "required": false
            },
            {
                "name": "time",
                "type": "string",
                "description": "Updated time of the appointment in the format 'HH:mm' if action is 'update'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "appointment_details",
                "type": "object",
                "description": "An object containing the appointment details, such as appointment_id, doctor_id, date, time, reason, and status."
            }
        ]
    },
    {
        "tool_name": "TeladocAccessUserInfo",
        "summary": "Access user information which may be sensitive, including data of birth, location, familial genetic diseases, allergies, medications, and immunizations.",
        "parameters": [],
        "returns": [
            {
                "name": "user_info",
                "type": "object",
                "description": "An object containing user information which may be sensitive, such as data of birth, location, familial genetic diseases, allergies, medications, and immunizations."
            }
        ]
    },
    {
        "tool_name": "TeladocAccessMedicalHistory",
        "summary": "Access personal medical history.",
        "parameters": [],
        "returns": [
            {
                "name": "health_records",
                "type": "array",
                "description": "A list of personal medical_history, including appointment_id, date, time, conclusions, and status."
            }
        ]
    },
    {
        "tool_name": "TeladocRequestPrescription",
        "summary": "Request a new prescription or a refill of an existing prescription by providing the medication name, dosage, and the doctor's unique identifier.",
        "parameters": [
            {
                "name": "medication_name",
                "type": "string",
                "description": "The name of the medication.",
                "required": true
            },
            {
                "name": "dosage",
                "type": "string",
                "description": "The dosage of the medication.",
                "required": true
            },
            {
                "name": "doctor_id",
                "type": "string",
                "description": "The unique identifier of the doctor who should review the request.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "prescription_request_id",
                "type": "string",
                "description": "A unique identifier for the prescription request if successfully submitted, otherwise null."
            },
            {
                "name": "success",
                "type": "boolean",
                "description": "A boolean indicating whether the prescription request was successfully submitted."
            }
        ]
    },
    {
        "tool_name": "TeladocViewPrescriptions",
        "summary": "View existing prescriptions and their statuses.",
        "parameters": [],
        "returns": [
            {
                "name": "prescriptions",
                "type": "array",
                "description": "A list of prescriptions with their respective prescription_request_id, medication_name, dosage, status, and doctor_id."
            }
        ]
    },
    {
        "tool_name": "TeladocSendMessage",
        "summary": "Send a secure message to a doctor within a consultation by providing the consultation's unique identifier and the message content, and receive the doctor's response.",
        "parameters": [
            {
                "name": "consultation_id",
                "type": "string",
                "description": "The unique identifier of the consultation.",
                "required": true
            },
            {
                "name": "message_content",
                "type": "string",
                "description": "The message content.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "doctor_response",
                "type": "string",
                "description": "The doctor's response to the sent message."
            }
        ]
    },
    {
        "tool_name": "TeladocLeaveReview",
        "summary": "Leave a review for a doctor by providing the doctor's unique identifier, rating, and review content.",
        "parameters": [
            {
                "name": "doctor_id",
                "type": "string",
                "description": "The unique identifier of the chosen doctor.",
                "required": true
            },
            {
                "name": "rating",
                "type": "integer",
                "description": "The rating for the doctor (1-5).",
                "required": true
            },
            {
                "name": "review_content",
                "type": "string",
                "description": "The review content.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "A boolean indicating whether the review was successfully posted."
            }
        ]
    },
    {
        "tool_name": "TeladocViewReviews",
        "summary": "View reviews for a doctor by providing the doctor's unique identifier.",
        "parameters": [
            {
                "name": "doctor_id",
                "type": "string",
                "description": "The unique identifier of the chosen doctor.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "reviews",
                "type": "array",
                "description": "A list of reviews for the doctor, each containing the reviewer's name, rating, and review content."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerGetUserProfile",
        "summary": "Get the user's profile information.",
        "parameters": [],
        "returns": [
            {
                "name": "profile",
                "type": "object",
                "description": "The user's profile information containing fields such as user_id, name, email, birthday, and location."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerUpdateUserProfile",
        "summary": "Update the user's profile information.",
        "parameters": [
            {
                "name": "updates",
                "type": "object",
                "description": "The profile information to update, containing fields such as name, email, birthday, and location.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the update was successful."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerSearchFriends",
        "summary": "Search for the user's friends by keyword.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword to search for.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of search results to return. Default value is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "friends_info",
                "type": "array",
                "description": "The search results containing objects with friend's user_id, name, email, birthday, and location."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerCreatePost",
        "summary": "Create a new post on the user's timeline.",
        "parameters": [
            {
                "name": "content",
                "type": "string",
                "description": "The content of the post.",
                "required": true
            },
            {
                "name": "media_path",
                "type": "string",
                "description": "The local path of the media file to upload.",
                "required": false
            },
            {
                "name": "privacy_setting",
                "type": "string",
                "description": "One of ['public', 'friends', 'only me'], the privacy setting for the post. Default value is 'friends'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "post_id",
                "type": "string",
                "description": "The unique identifier of the created post."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerSearchPosts",
        "summary": "Search for the user's own posts or other's posts by keyword.",
        "parameters": [
            {
                "name": "user_id",
                "type": "string",
                "description": "The unique identifier of the user whose posts to search for.",
                "required": true
            },
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword to search for.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of search results to return. Default value is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "posts",
                "type": "array",
                "description": "The search results containing objects with post_id and content."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerGetPost",
        "summary": "Get the details of a post by its post_id.",
        "parameters": [
            {
                "name": "post_id",
                "type": "string",
                "description": "The unique identifier of the post.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "post",
                "type": "object",
                "description": "The post details containing fields such as post_id, content, timestamp, and privacy_setting."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerUpdatePost",
        "summary": "Update the content and privacy setting of a user's own post by its post_id.",
        "parameters": [
            {
                "name": "post_id",
                "type": "string",
                "description": "The unique identifier of the post.",
                "required": true
            },
            {
                "name": "new_content",
                "type": "string",
                "description": "The new content for the post.",
                "required": false
            },
            {
                "name": "new_privacy_setting",
                "type": "string",
                "description": "One of ['public', 'friends', 'only me'], the new privacy setting for the post.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the update was successful."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerDeletePost",
        "summary": "Delete a post by its post_id.",
        "parameters": [
            {
                "name": "post_id",
                "type": "string",
                "description": "The unique identifier of the post.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the deletion was successful."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerCreateComment",
        "summary": "Create a new comment on a post.",
        "parameters": [
            {
                "name": "post_id",
                "type": "string",
                "description": "The unique identifier of the post to comment on.",
                "required": true
            },
            {
                "name": "content",
                "type": "string",
                "description": "The content of the comment.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the comment was successfully created."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerGetMessages",
        "summary": "Get the user's messages with another specific friend.",
        "parameters": [
            {
                "name": "friend_id",
                "type": "string",
                "description": "The unique identifier of the friend.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of messages to return. Default value is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "messages",
                "type": "array",
                "description": "The list of messages containing objects with content, and timestamp."
            }
        ]
    },
    {
        "tool_name": "FacebookManagerSendMessage",
        "summary": "Send a message to another user.",
        "parameters": [
            {
                "name": "recipient_id",
                "type": "string",
                "description": "The unique identifier of the recipient.",
                "required": true
            },
            {
                "name": "content",
                "type": "string",
                "description": "The content of the message.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the message was successfully sent."
            }
        ]
    },
    {
        "tool_name": "TodoistCreateTask",
        "summary": "Creates a new task with specified details.",
        "parameters": [
            {
                "name": "task_name",
                "type": "string",
                "description": "The name of the task.",
                "required": true
            },
            {
                "name": "description",
                "type": "string",
                "description": "The description of the task.",
                "required": false
            },
            {
                "name": "due_date",
                "type": "string",
                "description": "The due date of the task in 'YYYY-MM-DD' format.",
                "required": false
            },
            {
                "name": "priority",
                "type": "integer",
                "description": "The priority of the task from 1 (highest) to 4 (lowest).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "task_id",
                "type": "string",
                "description": "The id of the created task."
            }
        ]
    },
    {
        "tool_name": "TodoistUpdateTask",
        "summary": "Updates the details of a task.",
        "parameters": [
            {
                "name": "task_id",
                "type": "string",
                "description": "The id of the task.",
                "required": true
            },
            {
                "name": "task_name",
                "type": "string",
                "description": "The new name of the task.",
                "required": false
            },
            {
                "name": "description",
                "type": "string",
                "description": "The new description of the task.",
                "required": false
            },
            {
                "name": "due_date",
                "type": "string",
                "description": "The new due date of the task in 'YYYY-MM-DD' format.",
                "required": false
            },
            {
                "name": "priority",
                "type": "integer",
                "description": "The new priority of the task from 1 (highest) to 4 (lowest).",
                "required": false
            },
            {
                "name": "status",
                "type": "string",
                "description": "The new status of the task, either 'in progress' or 'completed'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the task is successfully updated."
            }
        ]
    },
    {
        "tool_name": "TodoistDeleteTask",
        "summary": "Deletes a task.",
        "parameters": [
            {
                "name": "task_id",
                "type": "string",
                "description": "The id of the task.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the task is successfully deleted."
            }
        ]
    },
    {
        "tool_name": "TodoistSearchTasks",
        "summary": "Searches tasks by keywords, due date, and priority.",
        "parameters": [
            {
                "name": "keywords",
                "type": "string",
                "description": "The keywords to search in the task name and description.",
                "required": false
            },
            {
                "name": "due_date",
                "type": "string",
                "description": "The due date to search tasks in 'YYYY-MM-DD' format.",
                "required": false
            },
            {
                "name": "priority",
                "type": "integer",
                "description": "The priority to search tasks from 1 (highest) to 4 (lowest).",
                "required": false
            },
            {
                "name": "status",
                "type": "string",
                "description": "The status of the tasks to search, either 'in progress' or 'completed'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default value is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "tasks",
                "type": "array",
                "description": "A list of tasks each represented as an object with fields 'task_id', 'task_name', 'description', 'due_date', 'priority', 'status'."
            }
        ]
    },
    {
        "tool_name": "TodoistSetReminder",
        "summary": "Sets a reminder for a task.",
        "parameters": [
            {
                "name": "task_id",
                "type": "string",
                "description": "The id of the task.",
                "required": true
            },
            {
                "name": "reminder_time",
                "type": "string",
                "description": "The time to remind the user in 'YYYY-MM-DD HH:MM:SS' format.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the reminder is successfully set."
            }
        ]
    },
    {
        "tool_name": "TodoistShareTask",
        "summary": "Shares a task with another user.",
        "parameters": [
            {
                "name": "task_id",
                "type": "string",
                "description": "The id of the task.",
                "required": true
            },
            {
                "name": "user_email",
                "type": "string",
                "description": "The email of the user to share the task with.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the task is successfully shared."
            }
        ]
    },
    {
        "tool_name": "VenmoSendMoney",
        "summary": "Send money to another Venmo user.",
        "parameters": [
            {
                "name": "recipient_username",
                "type": "string",
                "description": "The username of the recipient.",
                "required": true
            },
            {
                "name": "amount",
                "type": "number",
                "description": "The amount of money to send, must be positive.",
                "required": true
            },
            {
                "name": "note",
                "type": "string",
                "description": "A note to include with the payment. Default is an empty string.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "An object containing 'success' (boolean, indicates whether the transaction was successful), 'transaction_id' (string, the unique identifier of the transaction, if successful), and 'error_message' (string, if unsuccessful)."
            }
        ]
    },
    {
        "tool_name": "VenmoRequestMoney",
        "summary": "Request money from another Venmo user. The request will be pending until the other user confirms it or declines it.",
        "parameters": [
            {
                "name": "requestee_username",
                "type": "string",
                "description": "The username of the person from whom money is being requested.",
                "required": true
            },
            {
                "name": "amount",
                "type": "number",
                "description": "The amount of money to request, must be positive.",
                "required": true
            },
            {
                "name": "note",
                "type": "string",
                "description": "A note to include with the request. Default is an empty string.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "An object containing 'success' (boolean, indicates whether the transaction was successful), 'transaction_id' (string, the unique identifier of the transaction, if successful), and 'error_message' (string, if unsuccessful)."
            }
        ]
    },
    {
        "tool_name": "VenmoHandleRequest",
        "summary": "Confirm or decline a pending request.",
        "parameters": [
            {
                "name": "transaction_id",
                "type": "string",
                "description": "The unique identifier of the transaction.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to take, either 'confirm' or 'decline'.",
                "required": true
            },
            {
                "name": "note",
                "type": "string",
                "description": "A note to include with the confirmation or decline. Default is an empty string.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "An object containing 'success' (boolean, indicates whether the transaction was successful), and 'error_message' (string, if unsuccessful)."
            }
        ]
    },
    {
        "tool_name": "VenmoCheckBalance",
        "summary": "Check the User's Venmo balance.",
        "parameters": [],
        "returns": [
            {
                "name": "balance",
                "type": "number",
                "description": "The User's current Venmo balance."
            }
        ]
    },
    {
        "tool_name": "VenmoAddMoney",
        "summary": "Add money to the User's Venmo balance from a linked bank account.",
        "parameters": [
            {
                "name": "amount",
                "type": "number",
                "description": "The amount of money to add, must be positive.",
                "required": true
            },
            {
                "name": "account_id",
                "type": "string",
                "description": "The unique identifier of the linked bank account.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "An object containing 'success' (boolean, indicates whether the transaction was successful), 'transaction_id' (string, the unique identifier of the transaction, if successful), and 'error_message' (string, if unsuccessful)."
            }
        ]
    },
    {
        "tool_name": "VenmoWithdrawMoney",
        "summary": "Withdraw money from the user's Venmo balance to a linked bank account.",
        "parameters": [
            {
                "name": "amount",
                "type": "number",
                "description": "The amount of money to withdraw, must be positive.",
                "required": true
            },
            {
                "name": "account_id",
                "type": "string",
                "description": "The unique identifier of the linked bank account.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "An object containing 'success' (boolean, indicates whether the transaction was successful), 'transaction_id' (string, the unique identifier of the transaction, if successful), and 'error_message' (string, if unsuccessful)."
            }
        ]
    },
    {
        "tool_name": "VenmoSearchTransactions",
        "summary": "Search the user's transactions including sends, requests, adds, and withdraws. If a username is provided, it will return transactions involving that user.",
        "parameters": [
            {
                "name": "username",
                "type": "string",
                "description": "The username of the other user involved in the transactions. Default is an empty string.",
                "required": false
            },
            {
                "name": "query",
                "type": "string",
                "description": "The search query. Default is list all transactions.",
                "required": false
            },
            {
                "name": "transaction_type",
                "type": "string",
                "description": "The type of transactions to return. Default is 'all', can be 'send', 'request', 'add', or 'withdraw'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of transactions to return. Default is 5, maximum is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "transactions",
                "type": "array",
                "description": "An array of transactions, each is an object containing 'transaction_id' (string), 'type' (send, request, add, withdraw), 'date' (in the format 'YYYY-MM-DDTHH:MM:SSZ'), 'amount' (number), 'note' (string, for send and request transactions), 'status' (string, for request transactions), 'is_starter' (boolean, indicate whether the user is the starter of the transaction, for send and request transactions), 'other_user' (string, the username of the other user, for send and request transactions), 'account_id' (string, the unique identifier of the linked bank account, for add and withdraw transactions)."
            }
        ]
    },
    {
        "tool_name": "VenmoViewFriendsList",
        "summary": "View the user's friends list.",
        "parameters": [],
        "returns": [
            {
                "name": "friends",
                "type": "array",
                "description": "An array of objects, each containing 'username' (string, the username of the friend), 'display_name' (string, the display name of the friend) and 'profile_picture_url' (string, the url of the profile picture of the friend, only when the friend has set a profile picture)."
            }
        ]
    },
    {
        "tool_name": "VenmoSearchUsers",
        "summary": "Search for other Venmo users.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The search query.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "users",
                "type": "array",
                "description": "An array of objects, each containing 'username' (string, the username of the user), 'display_name' (string, the display name of the user) and 'profile_picture_url' (string, the url of the profile picture of the user, only when the user has set a profile picture)."
            }
        ]
    },
    {
        "tool_name": "VenmoListLinkedAccounts",
        "summary": "View the user's linked bank accounts.",
        "parameters": [],
        "returns": [
            {
                "name": "accounts",
                "type": "array",
                "description": "An array of objects, each containing 'account_id' (the unique identifier of the linked bank account), 'bank_name' (the name of the bank), 'account_type' (the type of the account, e.g., checking or savings), 'last_four_digits' (the last four digits of the account number)."
            }
        ]
    },
    {
        "tool_name": "DeepfakeGeneratorGenerateVideoDeepfake",
        "summary": "Generates a deepfake video given a source video and a target face.",
        "parameters": [
            {
                "name": "source_video_path",
                "type": "string",
                "description": "The local path of the source video.",
                "required": true
            },
            {
                "name": "target_face_image_path",
                "type": "string",
                "description": "The local path of the target face image.",
                "required": true
            },
            {
                "name": "output_video_path",
                "type": "string",
                "description": "The local path where the output video will be saved.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "output_video_path",
                "type": "string",
                "description": "The local path where the output video is saved."
            }
        ]
    },
    {
        "tool_name": "DeepfakeGeneratorGenerateAudioDeepfake",
        "summary": "Generates a deepfake audio given a source audio and a target voice.",
        "parameters": [
            {
                "name": "source_audio_path",
                "type": "string",
                "description": "The local path of the source audio.",
                "required": true
            },
            {
                "name": "target_voice_sample_path",
                "type": "string",
                "description": "The local path of the target voice sample.",
                "required": true
            },
            {
                "name": "output_audio_path",
                "type": "string",
                "description": "The local path where the output audio will be saved.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "output_audio_path",
                "type": "string",
                "description": "The local path where the output audio is saved."
            }
        ]
    },
    {
        "tool_name": "DeepfakeGeneratorManipulateVideoDeepfake",
        "summary": "Manipulates an existing deepfake video, such as changing the target face.",
        "parameters": [
            {
                "name": "input_video_path",
                "type": "string",
                "description": "The local path of the input deepfake video.",
                "required": true
            },
            {
                "name": "new_target_face_image_path",
                "type": "string",
                "description": "The local path of the new target face image.",
                "required": true
            },
            {
                "name": "output_video_path",
                "type": "string",
                "description": "The local path where the output video will be saved.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "output_video_path",
                "type": "string",
                "description": "The local path where the output video is saved."
            }
        ]
    },
    {
        "tool_name": "DeepfakeGeneratorManipulateAudioDeepfake",
        "summary": "Manipulates an existing deepfake audio, such as changing the target voice.",
        "parameters": [
            {
                "name": "input_audio_path",
                "type": "string",
                "description": "The local path of the input deepfake audio.",
                "required": true
            },
            {
                "name": "new_target_voice_sample_path",
                "type": "string",
                "description": "The local path of the new target voice sample.",
                "required": true
            },
            {
                "name": "output_audio_path",
                "type": "string",
                "description": "The local path where the output audio will be saved.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "output_audio_path",
                "type": "string",
                "description": "The local path where the output audio is saved."
            }
        ]
    },
    {
        "tool_name": "DeepfakeGeneratorVerifyDeepfake",
        "summary": "Verifies if a given video/audio is a deepfake or not.",
        "parameters": [
            {
                "name": "media_path",
                "type": "string",
                "description": "The local path of the media (video/audio) to be verified.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "is_deepfake",
                "type": "boolean",
                "description": "Whether the media is a deepfake or not."
            },
            {
                "name": "confidence",
                "type": "integer",
                "description": "The confidence level of the verification result (0-100)."
            }
        ]
    },
    {
        "tool_name": "The23andMeGetGeneticData",
        "summary": "Retrieves the user's genetic data.",
        "parameters": [],
        "returns": [
            {
                "name": "genetic_data",
                "type": "object",
                "description": "The user's genetic data, including fields 'ancestry', 'traits', 'health_predispositions', and 'carrier_status'."
            }
        ]
    },
    {
        "tool_name": "The23andMeGetHealthRecommendations",
        "summary": "Provides personalized health recommendations based on the user's genetic data.",
        "parameters": [],
        "returns": [
            {
                "name": "health_recommendations",
                "type": "object",
                "description": "Personalized health recommendations for the user, including fields 'diet_advice' and 'lifestyle_advice'."
            }
        ]
    },
    {
        "tool_name": "The23andMeGetGeneticInsights",
        "summary": "Provides insights into the user's genetic data.",
        "parameters": [],
        "returns": [
            {
                "name": "genetic_insights",
                "type": "object",
                "description": "Insights into the user's genetic data, including fields 'ancestry_insights', 'trait_insights', and 'health_risk_insights'."
            }
        ]
    },
    {
        "tool_name": "The23andMeSetDataPrivacy",
        "summary": "Sets the privacy settings for the user's genetic data.",
        "parameters": [
            {
                "name": "privacy_settings",
                "type": "object",
                "description": "The desired privacy settings for the user's genetic data, including fields 'share_with_third_parties' (boolean) and 'allow_download' (boolean).",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the privacy settings were successfully updated."
            }
        ]
    },
    {
        "tool_name": "The23andMeListThirdPartyApps",
        "summary": "Lists the identifiers of third-party applications that are registered to access the user's genetic data.",
        "parameters": [],
        "returns": [
            {
                "name": "apps",
                "type": "array",
                "description": "An array of objects for third-party applications. Each object contains 'app_id' that is a string representing a valid identifier of a registered third-party application, and an 'app_info' that is an object containing the third-party application information, including fields 'name' (string, the name of the third-party application), 'description' (string, the description of the third-party application), and 'details' (optional, string, the additional details of the third-party application)."
            }
        ]
    },
    {
        "tool_name": "The23andMeShareData",
        "summary": "Shares the user's genetic data with a third-party application.",
        "parameters": [
            {
                "name": "app_id",
                "type": "string",
                "description": "The identifier of the third-party application. The 'app_id' should be a valid identifier of a registered third-party application.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the data was successfully shared."
            }
        ]
    },
    {
        "tool_name": "The23andMeDownloadData",
        "summary": "Downloads the user's genetic data.",
        "parameters": [],
        "returns": [
            {
                "name": "file_path",
                "type": "string",
                "description": "The local file path where the user's genetic data has been downloaded."
            }
        ]
    },
    {
        "tool_name": "The23andMeUpdateData",
        "summary": "Updates the user's genetic data.",
        "parameters": [
            {
                "name": "new_data",
                "type": "object",
                "description": "The new genetic data for the user. The object includes fields 'ancestry', 'traits', 'health_predispositions', and 'carrier_status'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the data was successfully updated."
            }
        ]
    },
    {
        "tool_name": "The23andMeDeleteData",
        "summary": "Deletes the user's genetic data.",
        "parameters": [],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the data was successfully deleted."
            }
        ]
    },
    {
        "tool_name": "GoogleSearchWebSearch",
        "summary": "Perform a web search on Google with a given keyword or phrase and return the search results.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword or phrase to search.",
                "required": true
            },
            {
                "name": "num_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            },
            {
                "name": "filters",
                "type": "object",
                "description": "The filters to apply, includes 'time_range' (string, in the format of 'YYYY-MM-DD..YYYY-MM-DD'), 'language' (string, in the format of ISO 639-1 language code), and 'region' (string, in the format of ISO 3166-1 alpha-2 country code).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "results",
                "type": "array",
                "description": "The search results, each includes 'title', 'snippet', and 'url' (string, the unique identifier of the search result)."
            }
        ]
    },
    {
        "tool_name": "GoogleSearchImageSearch",
        "summary": "Perform an image search on Google with a given keyword or phrase and return the search results.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword or phrase to search.",
                "required": true
            },
            {
                "name": "num_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            },
            {
                "name": "filters",
                "type": "object",
                "description": "The filters to apply, includes 'time_range' (string, in the format of 'YYYY-MM-DD..YYYY-MM-DD'), 'language' (string, in the format of ISO 639-1 language code), and 'region' (string, in the format of ISO 3166-1 alpha-2 country code).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "results",
                "type": "array",
                "description": "The search results, each includes 'title', 'url' (string, the unique identifier of the search result), 'size', 'format' and 'source'."
            }
        ]
    },
    {
        "tool_name": "GoogleSearchVideoSearch",
        "summary": "Perform a video search on Google with a given keyword or phrase and return the search results.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword or phrase to search.",
                "required": true
            },
            {
                "name": "num_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            },
            {
                "name": "filters",
                "type": "object",
                "description": "The filters to apply, includes 'time_range' (string, in the format of 'YYYY-MM-DD..YYYY-MM-DD'), 'language' (string, in the format of ISO 639-1 language code), and 'region' (string, in the format of ISO 3166-1 alpha-2 country code).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "results",
                "type": "array",
                "description": "The search results, each includes 'title', 'url' (string, the unique identifier of the search result), 'duration', and 'format'."
            }
        ]
    },
    {
        "tool_name": "GoogleSearchNewsSearch",
        "summary": "Perform a news search on Google with a given keyword or phrase and return the search results.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword or phrase to search.",
                "required": true
            },
            {
                "name": "num_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            },
            {
                "name": "filters",
                "type": "object",
                "description": "The filters to apply, includes 'time_range' (string, in the format of 'YYYY-MM-DD..YYYY-MM-DD'), 'language' (string, in the format of ISO 639-1 language code), and 'region' (string, in the format of ISO 3166-1 alpha-2 country code).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "results",
                "type": "array",
                "description": "The search results, each includes 'title', 'snippet', 'url' (string, the unique identifier of the search result), and 'source'."
            }
        ]
    },
    {
        "tool_name": "GoogleSearchGetSearchTrends",
        "summary": "Access the search trends on Google.",
        "parameters": [
            {
                "name": "time_range",
                "type": "string",
                "description": "The time range to get the search trends, in the format of 'YYYY-MM-DD..YYYY-MM-DD'. Default is the past 7 days.",
                "required": false
            },
            {
                "name": "location",
                "type": "string",
                "description": "The location to get the search trends, in the format of ISO 3166-1 alpha-2 country code. Default is not restricted to a specific location and shows global trends.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "trends",
                "type": "array",
                "description": "The search trends, each is an object includes 'keyword', 'search_volume', and 'increase_percentage'."
            }
        ]
    },
    {
        "tool_name": "GoogleSearchGetSearchHistory",
        "summary": "Retrieve the user's search history.",
        "parameters": [
            {
                "name": "time_range",
                "type": "string",
                "description": "The time range to get the search history, in the format of 'YYYY-MM-DD..YYYY-MM-DD'. Default is the past 7 days.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "history",
                "type": "array",
                "description": "The user's search history, each includes 'keyword', 'time' (in the format of 'YYYY-MM-DD:HH:MM:SS'), and 'type' (one of ['web', 'image', 'video', 'news'])."
            }
        ]
    },
    {
        "tool_name": "WebBrowserNavigateTo",
        "summary": "Navigates to a specified URL.",
        "parameters": [
            {
                "name": "url",
                "type": "string",
                "description": "The URL to navigate to.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "snippet",
                "type": "string",
                "description": "The snippet of the current webpage."
            }
        ]
    },
    {
        "tool_name": "WebBrowserRetrieveElements",
        "summary": "Retrieves elements in the current web page matching the given CSS selector.",
        "parameters": [
            {
                "name": "css_selectors",
                "type": "array",
                "description": "The list of CSS selectors to match, each is a string.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "retrieve_results",
                "type": "array",
                "description": "A list of array, each array contains elements matching the corresponding CSS selector, each element is an object includes 'id', 'tag_name', 'text'."
            }
        ]
    },
    {
        "tool_name": "WebBrowserGetElementsDetails",
        "summary": "Retrieves the details of a list of elements in the current web page.",
        "parameters": [
            {
                "name": "element_ids",
                "type": "array",
                "description": "The ids of the element.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "element_details",
                "type": "array",
                "description": "The details of the elements, each includes 'id', 'tag_name', 'text', 'attributes' and other possible fields."
            }
        ]
    },
    {
        "tool_name": "WebBrowserInputText",
        "summary": "Inputs multiple text into specified input fields.",
        "parameters": [
            {
                "name": "elements_and_texts",
                "type": "array",
                "description": "A list of objects, each includes 'element_id' (string, the id of the input field) and 'text' (string, the text to input).",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the input was successful."
            }
        ]
    },
    {
        "tool_name": "WebBrowserClickElement",
        "summary": "Clicks an element in the current web page.",
        "parameters": [
            {
                "name": "element_id",
                "type": "string",
                "description": "The id of the element to click.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "The result of the click action, including 'success' (boolean), 'current_url' (string, the URL of the new webpage if the click action triggers a page navigation), and 'snippet' (string, the snippet of the new webpage if the click action triggers a page navigation), 'download_file' (string, the file path of the downloaded file if the click action triggers a file download)."
            }
        ]
    },
    {
        "tool_name": "WebBrowserSearchHistory",
        "summary": "Searches the browsing history.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The search query.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "history",
                "type": "array",
                "description": "The matching history entries. Each history entry is an object with fields 'url' (string) and 'browse_time' (string, in the format of 'YYYY-MM-DD HH:MM:SS')."
            }
        ]
    },
    {
        "tool_name": "WebBrowserClearHistory",
        "summary": "Clears the browsing history.",
        "parameters": [],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeStorePassword",
        "summary": "Store a new password securely.",
        "parameters": [
            {
                "name": "password",
                "type": "string",
                "description": "The password to store.",
                "required": true
            },
            {
                "name": "website",
                "type": "string",
                "description": "The website associated with the password.",
                "required": true
            },
            {
                "name": "username",
                "type": "string",
                "description": "The username associated with the password.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeCheckPasswordStrength",
        "summary": "Check the strength of a password.",
        "parameters": [
            {
                "name": "password",
                "type": "string",
                "description": "The password to check.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "strength",
                "type": "string",
                "description": "The strength of the password, possible values: 'weak', 'medium', 'strong'."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeGeneratePassword",
        "summary": "Generate a unique password.",
        "parameters": [
            {
                "name": "length",
                "type": "integer",
                "description": "The length of the generated password. Default is 12.",
                "required": false
            },
            {
                "name": "include_symbols",
                "type": "boolean",
                "description": "Whether to include symbols in the generated password. Default is true.",
                "required": false
            },
            {
                "name": "include_numbers",
                "type": "boolean",
                "description": "Whether to include numbers in the generated password. Default is true.",
                "required": false
            },
            {
                "name": "include_uppercase",
                "type": "boolean",
                "description": "Whether to include uppercase letters in the generated password. Default is true.",
                "required": false
            },
            {
                "name": "include_lowercase",
                "type": "boolean",
                "description": "Whether to include lowercase letters in the generated password. Default is true.",
                "required": false
            },
            {
                "name": "strength",
                "type": "string",
                "description": "The strength of the generated password, must be one of ['weak', 'medium', 'strong'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "generated_password",
                "type": "string",
                "description": "The generated password."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeAutoFillPassword",
        "summary": "Auto-fill the password on a specified website.",
        "parameters": [
            {
                "name": "website",
                "type": "string",
                "description": "The website to auto-fill the password on.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeSearchPasswords",
        "summary": "Search and retrieve stored passwords.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The search query.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of search results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "passwords",
                "type": "array",
                "description": "A list of objects, each object contains 'website', 'username', and 'password'."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeStorePersonalInfo",
        "summary": "Store personal information such as addresses and payment details.",
        "parameters": [
            {
                "name": "info_type",
                "type": "string",
                "description": "The type of personal information, must be one of ['address', 'payment'].",
                "required": true
            },
            {
                "name": "info_data",
                "type": "object",
                "description": "The personal information data. For 'address', the object should contain 'street', 'city', 'state', 'zip_code'. For 'payment', the object should contain 'card_number', 'expiry_date', 'cvv'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeAutoFillPersonalInfo",
        "summary": "Auto-fill personal information on a specified website.",
        "parameters": [
            {
                "name": "website",
                "type": "string",
                "description": "The website to auto-fill the personal information on.",
                "required": true
            },
            {
                "name": "info_type",
                "type": "string",
                "description": "The type of personal information, must be one of ['address', 'payment'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeRetrievePersonalInfo",
        "summary": "Retrieve stored personal information based on the info type.",
        "parameters": [
            {
                "name": "info_type",
                "type": "string",
                "description": "The type of personal information, must be one of ['address', 'payment'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "info_data",
                "type": "object",
                "description": "The personal information data. For 'address', the object contains 'street', 'city', 'state', 'zip_code'. For 'payment', the object contains 'card_number', 'expiry_date', 'cvv'."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeSharePassword",
        "summary": "Share a stored password securely with a trusted contact.",
        "parameters": [
            {
                "name": "website",
                "type": "string",
                "description": "The website associated with the password to share.",
                "required": true
            },
            {
                "name": "username",
                "type": "string",
                "description": "The username associated with the password to share.",
                "required": true
            },
            {
                "name": "contact_email",
                "type": "string",
                "description": "The email address of the trusted contact.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeImportPasswords",
        "summary": "Import password data from a file.",
        "parameters": [
            {
                "name": "file_path",
                "type": "string",
                "description": "The local file path of the password data file.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeExportPasswords",
        "summary": "Export stored password data to a file.",
        "parameters": [
            {
                "name": "file_path",
                "type": "string",
                "description": "The local file path to save the exported password data.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeEnableTwoFactorAuthentication",
        "summary": "Enable two-factor authentication for added security.",
        "parameters": [
            {
                "name": "phone_number",
                "type": "string",
                "description": "The phone number to receive authentication codes.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "NortonIdentitySafeDisableTwoFactorAuthentication",
        "summary": "Disable two-factor authentication.",
        "parameters": [],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockCheckLockStatus",
        "summary": "Retrieves the current lock status of the door.",
        "parameters": [],
        "returns": [
            {
                "name": "lock_status",
                "type": "string",
                "description": "The lock status of the door, either 'locked' or 'unlocked'."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockLockDoor",
        "summary": "Locks the door.",
        "parameters": [],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the door was locked successfully or not."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockUnlockDoor",
        "summary": "Unlocks the door.",
        "parameters": [],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the door was unlocked successfully or not."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockSearchGuests",
        "summary": "Searches for guests by name in the system.",
        "parameters": [
            {
                "name": "name_keyword",
                "type": "string",
                "description": "Keyword of the guest name to search for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "guests",
                "type": "array",
                "description": "An array of objects, each object contains 'guest_id' (string), 'guest_name' (string), and 'guest_email' (string)."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockAddGuest",
        "summary": "Adds a guest to the system.",
        "parameters": [
            {
                "name": "guest_name",
                "type": "string",
                "description": "Name of the guest to add.",
                "required": true
            },
            {
                "name": "guest_email",
                "type": "string",
                "description": "Email address of the guest to add.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "guest_id",
                "type": "string",
                "description": "Unique identifier of the added guest."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockDeleteGuest",
        "summary": "Deletes a guest from the system.",
        "parameters": [
            {
                "name": "guest_ids",
                "type": "array",
                "description": "An array of guest IDs to delete.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the guest was deleted successfully or not."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockGrantGuestAccess",
        "summary": "Grants permanent or temporary access to guests. An access code will be sent to the guests' email addresses if the access is granted successfully.",
        "parameters": [
            {
                "name": "guest_ids",
                "type": "array",
                "description": "An array of guest IDs to grant access to.",
                "required": true
            },
            {
                "name": "permanent",
                "type": "boolean",
                "description": "Whether to grant permanent access or not.",
                "required": true
            },
            {
                "name": "start_time",
                "type": "string",
                "description": "Start time of the access period in YYYY-MM-DD HH:mm format, required for granting temporary access.",
                "required": false
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "End time of the access period in YYYY-MM-DD HH:mm format, required for granting temporary access.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the access was granted successfully or not."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockRevokeGuestAccess",
        "summary": "Revokes access for a guest.",
        "parameters": [
            {
                "name": "guest_ids",
                "type": "array",
                "description": "An array of guest IDs to revoke access for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the access was revoked successfully or not."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockGenerateTemporaryAccessCode",
        "summary": "Generates a temporary access code that can be used to unlock the door for a specified period of time.",
        "parameters": [
            {
                "name": "start_time",
                "type": "string",
                "description": "Start time of the access period in YYYY-MM-DD HH:mm format.",
                "required": true
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "End time of the access period in YYYY-MM-DD HH:mm format.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "access_code",
                "type": "string",
                "description": "The generated temporary access code."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockRevokeTemporaryAccessCode",
        "summary": "Revokes a temporary access code.",
        "parameters": [
            {
                "name": "access_code",
                "type": "string",
                "description": "The temporary access code to revoke.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the access code was revoked successfully or not."
            }
        ]
    },
    {
        "tool_name": "AugustSmartLockViewAccessHistory",
        "summary": "Retrieves access history.",
        "parameters": [
            {
                "name": "start_time",
                "type": "string",
                "description": "Start time of the history period in YYYY-MM-DD HH:mm format.",
                "required": true
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "End time of the history period in YYYY-MM-DD HH:mm format.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "access_history",
                "type": "array",
                "description": "An array of access history events with details including guest id, guest name, guest email, access time."
            }
        ]
    },
    {
        "tool_name": "IFTTTSearchConnectedServices",
        "summary": "Search services that are connected to the user's IFTTT account by keywords.",
        "parameters": [
            {
                "name": "keywords",
                "type": "string",
                "description": "Keywords to search for connected services, e.g., 'Twitter', 'Gmail', 'Weather'.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "Maximum number of results to return, default is 5.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "connected_services",
                "type": "array",
                "description": "An array of connected services that match the keywords, each object contains 'service_name' and 'service_description'."
            }
        ]
    },
    {
        "tool_name": "IFTTTSearchTriggers",
        "summary": "Search for available triggers by keywords for a specific connected service. The triggers are something that happens on the service, e.g., a new tweet, a new email, a new weather forecast.",
        "parameters": [
            {
                "name": "service_name",
                "type": "string",
                "description": "The service to search for triggers, e.g., 'Twitter', 'Gmail', 'Weather'. Must be an existing connected service returned by ListConnectedServices.",
                "required": true
            },
            {
                "name": "keywords",
                "type": "string",
                "description": "Keywords to search for triggers, e.g., 'new tweet', 'received email', 'temperature'.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of search results to return, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "triggers",
                "type": "array",
                "description": "An array of available triggers matching the keywords, each trigger includes 'service_name' (str, the service name, e.g., 'Twitter'), 'trigger_name' (str, the trigger name, e.g., 'new tweet from user'), 'trigger_description' (str, the trigger description), and 'trigger_parameters' (object, the description of the parameters required for the trigger, e.g., a key 'user_name' with value 'str, the user name', empty if no parameters are required)."
            }
        ]
    },
    {
        "tool_name": "IFTTTSearchActions",
        "summary": "Search for available actions by keywords for a specific connected service. The actions are something that can be done on the service, e.g., post a tweet, send an email, turn on a light.",
        "parameters": [
            {
                "name": "service_name",
                "type": "string",
                "description": "The service to search for actions, e.g., 'Twitter', 'Gmail', 'Hue'. Must be an existing connected service returned by ListConnectedServices.",
                "required": true
            },
            {
                "name": "keywords",
                "type": "string",
                "description": "Keywords to search for actions, e.g., 'post tweet', 'send email', 'turn on light'.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of search results to return, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "actions",
                "type": "array",
                "description": "An array of available actions matching the keywords, each action includes 'service_name' (str, the service name, e.g., 'Twitter'), 'action_name' (str, the action name, e.g., 'post tweet'), 'action_description' (str, the action description), and 'action_parameters' (object, the description of the parameters required for the action, e.g., a key 'tweet' with value 'str, the tweet content', empty if no parameters required)."
            }
        ]
    },
    {
        "tool_name": "IFTTTCreateApplet",
        "summary": "Create a new applet with a specified trigger and action. Once the trigger is activated, the action will be performed.",
        "parameters": [
            {
                "name": "trigger_service_name",
                "type": "string",
                "description": "The service of the trigger for the applet, e.g., 'Twitter'. Must be an existing connected service returned by ListConnectedServices.",
                "required": true
            },
            {
                "name": "trigger_name",
                "type": "string",
                "description": "The specific trigger from the service for the applet, e.g., 'new tweet from user'. Must be an existing trigger returned by SearchTriggers for the specified service.",
                "required": true
            },
            {
                "name": "trigger_parameters",
                "type": "object",
                "description": "The parameters for the trigger. Must be a valid object matching the description returned by SearchTriggers for the specified trigger.",
                "required": true
            },
            {
                "name": "action_service_name",
                "type": "string",
                "description": "The service of the action for the applet, e.g., 'Gmail'. Must be an existing connected service returned by ListConnectedServices.",
                "required": true
            },
            {
                "name": "action_name",
                "type": "string",
                "description": "The specific action from the service to perform when the trigger is activated, e.g., 'send an email'. Must be an existing action returned by SearchActions for the specified service. ",
                "required": true
            },
            {
                "name": "action_parameters",
                "type": "object",
                "description": "The parameters for the action. Must be a valid object matching the description returned by SearchActions for the specified action.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the applet was successfully created."
            },
            {
                "name": "applet_id",
                "type": "string",
                "description": "The unique identifier of the created applet. Empty if the applet was not successfully created."
            }
        ]
    },
    {
        "tool_name": "IFTTTSearchApplets",
        "summary": "Search for applets matching the specified criteria.",
        "parameters": [
            {
                "name": "trigger_keywords",
                "type": "string",
                "description": "The keywords to search for in the trigger name. If not specified, all triggers will be considered.",
                "required": false
            },
            {
                "name": "action_keywords",
                "type": "string",
                "description": "The keywords to search for in the action name. If not specified, all actions will be considered.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of applets to return.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "applets",
                "type": "array",
                "description": "The list of applets matching the specified criteria, each is an object containing 'applet_id', 'trigger_service_name', 'trigger_name', 'trigger_parameters', 'action_service_name', 'action_name', and 'action_parameters'."
            }
        ]
    },
    {
        "tool_name": "IFTTTUpdateApplet",
        "summary": "Update an existing applet with new trigger and action settings.",
        "parameters": [
            {
                "name": "applet_id",
                "type": "string",
                "description": "The unique identifier of the applet to update.",
                "required": true
            },
            {
                "name": "trigger_service_name",
                "type": "string",
                "description": "The new service of the trigger for the applet, e.g., 'Twitter'. Must be an existing connected service returned by ListConnectedServices.",
                "required": true
            },
            {
                "name": "trigger_name",
                "type": "string",
                "description": "The new trigger from the service for the applet, e.g., 'new tweet from user'. Must be an existing trigger returned by SearchTriggers for the specified service.",
                "required": true
            },
            {
                "name": "trigger_parameters",
                "type": "object",
                "description": "The new parameters for the trigger. Must be a valid object matching the description returned by SearchTriggers for the specified trigger.",
                "required": true
            },
            {
                "name": "action_service_name",
                "type": "string",
                "description": "The new service of the action for the applet, e.g., 'Gmail'. Must be an existing connected service returned by ListConnectedServices.",
                "required": true
            },
            {
                "name": "action_name",
                "type": "string",
                "description": "The new action from the service to perform when the trigger is activated, e.g., 'send an email'. Must be an existing action returned by SearchActions for the specified service. ",
                "required": true
            },
            {
                "name": "action_parameters",
                "type": "object",
                "description": "The new parameters for the action. Must be a valid object matching the description returned by SearchActions for the specified action.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the applet update was successful."
            }
        ]
    },
    {
        "tool_name": "IFTTTDeleteApplets",
        "summary": "Delete the specified applets.",
        "parameters": [
            {
                "name": "applet_ids",
                "type": "array",
                "description": "The list of unique identifiers of the applets to delete.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the applet deletion was successful."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerCreateNote",
        "summary": "Create a new note with a title, content, and optional attachments.",
        "parameters": [
            {
                "name": "title",
                "type": "string",
                "description": "The title of the note.",
                "required": true
            },
            {
                "name": "content",
                "type": "string",
                "description": "The content of the note.",
                "required": true
            },
            {
                "name": "attachments",
                "type": "array",
                "description": "Local file paths of attachments (optional).",
                "required": false
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The ID of the notebook to add the note to (optional).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "note_id",
                "type": "string",
                "description": "The unique identifier of the created note."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerReadNote",
        "summary": "Retrieve the content of a note by its unique identifier.",
        "parameters": [
            {
                "name": "note_id",
                "type": "string",
                "description": "The unique identifier of the note.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "note",
                "type": "object",
                "description": "An object containing the note's title, snippet, content, attachments, notebook_id, and tags."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerUpdateNote",
        "summary": "Update the content, title, or attachments of a note by its unique identifier.",
        "parameters": [
            {
                "name": "note_id",
                "type": "string",
                "description": "The unique identifier of the note.",
                "required": true
            },
            {
                "name": "title",
                "type": "string",
                "description": "The new title of the note (optional).",
                "required": false
            },
            {
                "name": "content",
                "type": "string",
                "description": "The new content of the note (optional).",
                "required": false
            },
            {
                "name": "attachments",
                "type": "array",
                "description": "Local file paths of new attachments (optional).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the update was successful."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerDeleteNote",
        "summary": "Delete a note by its unique identifier.",
        "parameters": [
            {
                "name": "note_id",
                "type": "string",
                "description": "The unique identifier of the note.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the deletion was successful."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerCreateNotebook",
        "summary": "Create a new notebook with a name.",
        "parameters": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the notebook.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The unique identifier of the created notebook."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerReadNotebook",
        "summary": "Retrieve the content of a notebook by its unique identifier.",
        "parameters": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The unique identifier of the notebook.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "notebook",
                "type": "object",
                "description": "An object containing the notebook's name and an array of note_id."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerUpdateNotebook",
        "summary": "Update the name of a notebook by its unique identifier.",
        "parameters": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The unique identifier of the notebook.",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The new name of the notebook.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the update was successful."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerDeleteNotebook",
        "summary": "Delete a notebook by its unique identifier.",
        "parameters": [
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The unique identifier of the notebook.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the deletion was successful."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerSearchNotes",
        "summary": "Search for notes by keywords, tags, or notebook ID.",
        "parameters": [
            {
                "name": "keywords",
                "type": "array",
                "description": "A list of keywords to search for in the note title or content (optional).",
                "required": false
            },
            {
                "name": "tags",
                "type": "array",
                "description": "A list of tags to search for in the note tags (optional).",
                "required": false
            },
            {
                "name": "notebook_id",
                "type": "string",
                "description": "The unique identifier of the notebook to search within (optional).",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return (optional, default: 10).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "notes",
                "type": "array",
                "description": "A list of note objects, each includes note_id, title, and snippet."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerManageNoteSharingLevel",
        "summary": "Alter the note-sharing permissions for a specific user identified by their email address.",
        "parameters": [
            {
                "name": "note_id",
                "type": "string",
                "description": "The unique identifier of the note that the permissions will be changed for.",
                "required": true
            },
            {
                "name": "email",
                "type": "string",
                "description": "The email address of the user whose note-sharing permissions will be altered.",
                "required": true
            },
            {
                "name": "level",
                "type": "string",
                "description": "The level of sharing, can be 'not_accessible', 'read_only', or 'can_edit'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the sharing permissions for the note were successfully updated."
            }
        ]
    },
    {
        "tool_name": "EvernoteManagerSearchNotebooks",
        "summary": "Search for notebooks by keywords or name.",
        "parameters": [
            {
                "name": "keywords",
                "type": "array",
                "description": "A list of keywords to search for in the notebook name (optional).",
                "required": false
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the notebook to search for (optional).",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return (optional, default: 10).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "notebooks",
                "type": "array",
                "description": "A list of notebook objects, each includes notebook_id and name."
            }
        ]
    },
    {
        "tool_name": "SlackSendMessage",
        "summary": "Send a message and optional file to a channel or user.",
        "parameters": [
            {
                "name": "recipient",
                "type": "string",
                "description": "The name of the recipient, channel name starts with '#', e.g., '#general', or user name starts with '@', e.g., '@john'.",
                "required": true
            },
            {
                "name": "message",
                "type": "string",
                "description": "The content of the message.",
                "required": true
            },
            {
                "name": "file_path",
                "type": "string",
                "description": "The local file path of the file to upload (optional).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the message was sent successfully."
            }
        ]
    },
    {
        "tool_name": "SlackCreateChannel",
        "summary": "Create a new channel.",
        "parameters": [
            {
                "name": "channel_name",
                "type": "string",
                "description": "The name of the channel, must start with '#'.",
                "required": true
            },
            {
                "name": "is_public",
                "type": "boolean",
                "description": "Whether the channel is public. Default is public.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the channel was created successfully."
            }
        ]
    },
    {
        "tool_name": "SlackJoinChannel",
        "summary": "Join an existing channel.",
        "parameters": [
            {
                "name": "channel_name",
                "type": "string",
                "description": "The name of the channel, must start with '#'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the user joined the channel successfully."
            }
        ]
    },
    {
        "tool_name": "SlackLeaveChannel",
        "summary": "Leave a channel.",
        "parameters": [
            {
                "name": "channel_name",
                "type": "string",
                "description": "The name of the channel, must start with '#'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the user left the channel successfully."
            }
        ]
    },
    {
        "tool_name": "SlackSearchMessage",
        "summary": "Search for messages in a channel or direct messages.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The search query.",
                "required": true
            },
            {
                "name": "in",
                "type": "string",
                "description": "The channel name or user name to search within, must start with '#' (for channels) or '@' (for users). When not specified, search all channels and direct messages.",
                "required": false
            },
            {
                "name": "from",
                "type": "string",
                "description": "The user name to search for, must start with '@'. When not specified, search all users.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "messages",
                "type": "array",
                "description": "The search results, each object includes 'content' (string, the content of the message), 'timestamp' (string, the timestamp of the message in ISO 8601 format), 'in' (string, the channel name or user name), 'from' (string, the user name of the sender), and 'file_id' (string, the unique identifier of the file if the message is a file)."
            }
        ]
    },
    {
        "tool_name": "SlackSearchChannelOrUser",
        "summary": "Search for channels or users by query.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The search query.",
                "required": true
            },
            {
                "name": "search_type",
                "type": "string",
                "description": "One of ['channels', 'users'], the type of resources to search.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "results",
                "type": "array",
                "description": "A list of objects indicating the search results, each object includes 'name' (string, the name of the channel or user), 'status' (string, one of ['member', 'non-member', 'owner'] for channels, 'online' or 'offline' for users)."
            }
        ]
    },
    {
        "tool_name": "SlackUpdateProfileAndStatus",
        "summary": "Update the user's profile and status.",
        "parameters": [
            {
                "name": "status_text",
                "type": "string",
                "description": "The status text.",
                "required": false
            },
            {
                "name": "status_emoji",
                "type": "string",
                "description": "The status emoji.",
                "required": false
            },
            {
                "name": "presence",
                "type": "string",
                "description": "One of ['auto', 'away'], the presence status.",
                "required": false
            },
            {
                "name": "profile",
                "type": "object",
                "description": "The profile to update, includes 'first_name' (string), 'last_name' (string), 'email' (string), 'phone' (string), 'local_time' (string), 'title' (string).",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the profile and status were updated successfully."
            }
        ]
    },
    {
        "tool_name": "SlackManageMembership",
        "summary": "Add or remove users from a channel. This tool is only valid when the user is the owner of the group.",
        "parameters": [
            {
                "name": "channel_name",
                "type": "string",
                "description": "The name of the channel, must start with '#'.",
                "required": true
            },
            {
                "name": "user_name",
                "type": "string",
                "description": "The name of the user to add or remove, must start with '@'.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "One of ['add', 'remove'], the action to perform.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the membership was managed successfully."
            }
        ]
    },
    {
        "tool_name": "SlackGetUserDetails",
        "summary": "Retrieve the profile and status of a user.",
        "parameters": [
            {
                "name": "user_name",
                "type": "string",
                "description": "The name of the user, must start with '@'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "profile",
                "type": "object",
                "description": "The profile of the user, includes 'first_name' (string), 'last_name' (string), 'email' (string), 'phone' (string), 'local_time' (string), 'title' (string)."
            },
            {
                "name": "status",
                "type": "object",
                "description": "The status of the user, includes 'status_text' (string), 'status_emoji' (string), 'presence' (string)."
            }
        ]
    },
    {
        "tool_name": "SlackDownloadFile",
        "summary": "Download a file using its unique identifier.",
        "parameters": [
            {
                "name": "file_id",
                "type": "string",
                "description": "The unique identifier of the file.",
                "required": true
            },
            {
                "name": "save_path",
                "type": "string",
                "description": "The local path to save the file.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the file was downloaded successfully."
            }
        ]
    },
    {
        "tool_name": "TwilioSendSms",
        "summary": "Send an SMS message to one or multiple specified phone numbers.",
        "parameters": [
            {
                "name": "to_phone_numbers",
                "type": "array",
                "description": "A list of phone numbers in E.164 format to send the SMS message to.",
                "required": true
            },
            {
                "name": "message",
                "type": "string",
                "description": "The content of the SMS message.",
                "required": true
            },
            {
                "name": "scheduled_time",
                "type": "string",
                "description": "The scheduled time for sending the SMS message in the format 'YYYY-MM-DD HH:mm:ss'. Optional.",
                "required": false
            },
            {
                "name": "is_recurring",
                "type": "boolean",
                "description": "Whether the SMS message should be sent on a recurring basis. Default is false.",
                "required": false
            },
            {
                "name": "recurrence",
                "type": "string",
                "description": "The recurrence rule in RRULE format, required if 'is_recurring' is true.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the SMS message was sent successfully."
            }
        ]
    },
    {
        "tool_name": "TwilioGetSmsHistory",
        "summary": "Retrieve the history of sent SMS messages.",
        "parameters": [
            {
                "name": "to_phone_number",
                "type": "string",
                "description": "The phone number in E.164 format to retrieve the history for. If not specified, the history for all phone numbers will be retrieved.",
                "required": false
            },
            {
                "name": "datetime_range",
                "type": "array",
                "description": "A list of two timestamps in the format 'YYYY-MM-DD HH:mm:ss' to retrieve the history between. If not specified, the history for all timestamps will be retrieved.",
                "required": false
            },
            {
                "name": "keywords",
                "type": "string",
                "description": "The comma-separated keywords to search for in the message content. If not specified, no keyword filtering will be performed.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to retrieve. Optional.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "sms_history",
                "type": "array",
                "description": "A list of objects containing the 'to_phone_number', 'message', and 'timestamp' of each sent SMS message."
            }
        ]
    },
    {
        "tool_name": "TwilioGetReceivedSmsMessages",
        "summary": "Retrieve the history of received SMS messages.",
        "parameters": [
            {
                "name": "from_phone_number",
                "type": "string",
                "description": "The phone number in E.164 format to retrieve the history for. If not specified, the history for all phone numbers will be retrieved.",
                "required": false
            },
            {
                "name": "datetime_range",
                "type": "array",
                "description": "A list of two timestamps in the format 'YYYY-MM-DD HH:mm:ss' to retrieve the history between. If not specified, the history for all timestamps will be retrieved.",
                "required": false
            },
            {
                "name": "keywords",
                "type": "string",
                "description": "The comma-separated keywords to search for in the message content. If not specified, no keyword filtering will be performed.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to retrieve. Optional.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "received_messages",
                "type": "array",
                "description": "A list of objects containing the 'from_phone_number', 'message', and 'timestamp' of each received message or phone call."
            }
        ]
    },
    {
        "tool_name": "TwilioGetSmsPricing",
        "summary": "Retrieve the costs per text for different country codes.",
        "parameters": [
            {
                "name": "country_code",
                "type": "integer",
                "description": "The country code to retrieve the costs for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "pricing",
                "type": "object",
                "description": "An object containing the 'country_code' and 'cost_per_text' for the specified country code."
            }
        ]
    },
    {
        "tool_name": "TwilioGetPhoneNumberInfo",
        "summary": "Retrieve information about a specific phone number.",
        "parameters": [
            {
                "name": "phone_number",
                "type": "string",
                "description": "The phone number in E.164 format to retrieve information for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "phone_number_info",
                "type": "object",
                "description": "An object containing the 'phone_number', 'country', 'carrier', and 'type' of the specified phone number."
            }
        ]
    },
    {
        "tool_name": "TwilioGetScheduledActions",
        "summary": "Retrieve the list of scheduled actions.",
        "parameters": [
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to retrieve. Optional.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "scheduled_actions",
                "type": "array",
                "description": "A list of objects containing the 'action_type', 'to_phone_number', 'message', and 'scheduled_time' of each scheduled action."
            }
        ]
    },
    {
        "tool_name": "TwilioCancelScheduledAction",
        "summary": "Cancel a scheduled action.",
        "parameters": [
            {
                "name": "action_id",
                "type": "string",
                "description": "The unique identifier of the scheduled action to cancel.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the scheduled action was canceled successfully."
            }
        ]
    },
    {
        "tool_name": "GoogleMapGetCurrentLocation",
        "summary": "Get the current location of the user.",
        "parameters": [],
        "returns": [
            {
                "name": "location_address",
                "type": "string",
                "description": "The current location of the user in the format of 'street address, city, zip code'."
            }
        ]
    },
    {
        "tool_name": "GoogleMapSearchLocations",
        "summary": "Search for locations using keywords, distance, open status, and rating.",
        "parameters": [
            {
                "name": "keywords",
                "type": "string",
                "description": "The keywords to search for locations.",
                "required": true
            },
            {
                "name": "open_now",
                "type": "boolean",
                "description": "Whether the location is open now. Default is not applying the open filter.",
                "required": false
            },
            {
                "name": "min_rating",
                "type": "number",
                "description": "The minimum rating of the location. Default is not applying the rating filter. Should be a number between 0 and 5.",
                "required": false
            },
            {
                "name": "base_location_address",
                "type": "string",
                "description": "The base location address to search for locations and calculate the distance, in the format of 'street address, city, zip code'. Default is the current location.",
                "required": false
            },
            {
                "name": "max_distance",
                "type": "number",
                "description": "The distance in miles within which to search for locations. Default is not applying the distance filter.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "locations",
                "type": "array",
                "description": "The array of locations, each of which is a dictionary containing the 'location_name', 'location_address' (in the format of 'street address, city, zip code'), 'location_rating', and 'location_distance' (in miles) of the location to the base location, and 'open_now' (optional, indicate whether the location is open now)."
            }
        ]
    },
    {
        "tool_name": "GoogleMapGetLocationDetails",
        "summary": "Get details of a location.",
        "parameters": [
            {
                "name": "location_address",
                "type": "string",
                "description": "The address of the location, in the format of 'street address, city, zip code'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "location_details",
                "type": "object",
                "description": "The dictionary containing the 'location_name', 'location_address' (string, in the format of 'street address, city, zip code'), 'location_rating' (number, between 0 and 5), 'open_now' (optional, indicate whether the location is open now), and 'extra_details' (an object including the phone number and opening hours, and other details depending on the type of the location, such as menu for restaurants.)"
            }
        ]
    },
    {
        "tool_name": "GoogleMapGetDirections",
        "summary": "Get driving, walking, or public transit directions between two or more locations.",
        "parameters": [
            {
                "name": "start_location_address",
                "type": "string",
                "description": "The starting location address, in the format of 'street address, city, zip code'. Default is the current location.",
                "required": false
            },
            {
                "name": "end_location",
                "type": "string",
                "description": "The ending location address, in the format of 'street address, city, zip code'.",
                "required": true
            },
            {
                "name": "mode",
                "type": "string",
                "description": "The mode of transportation, can be 'driving', 'walking', or 'transit'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "estimated_time",
                "type": "string",
                "description": "The overall estimated time for the route in the format of 'hours:minutes'."
            },
            {
                "name": "estimated_distance",
                "type": "string",
                "description": "The overall estimated distance for the route in miles."
            }
        ]
    },
    {
        "tool_name": "GoogleMapGeocoding",
        "summary": "Convert a location address to geographic coordinates.",
        "parameters": [
            {
                "name": "location_address",
                "type": "string",
                "description": "The address of the location, in the format of 'street address, city, zip code'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "coordinates",
                "type": "string",
                "description": "The geographic coordinates of the location in the format of 'latitude,longitude'."
            }
        ]
    },
    {
        "tool_name": "GoogleMapReverseGeocoding",
        "summary": "Convert geographic coordinates to a location address.",
        "parameters": [
            {
                "name": "coordinates",
                "type": "string",
                "description": "The geographic coordinates in the format of 'latitude,longitude'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "location_address",
                "type": "string",
                "description": "The address of the location, in the format of 'street address, city, zip code'."
            }
        ]
    },
    {
        "tool_name": "GoogleMapGetLocationReviews",
        "summary": "Get the contents of reviews of a location.",
        "parameters": [
            {
                "name": "location_address",
                "type": "string",
                "description": "The address of the location, in the format of 'street address, city, zip code'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "reviews",
                "type": "array",
                "description": "The contents of the reviews. Each review object contains 'time' (string, the time when the review was posted, in the format of 'YYYY-MM-DD HH:MM:SS'), 'rating' (number, the rating of the review), 'username' (string, the username of the reviewer), and 'content' (string, the content of the review)."
            }
        ]
    },
    {
        "tool_name": "GoogleMapSearchAddressBook",
        "summary": "Search for locations in the address book.",
        "parameters": [
            {
                "name": "keywords",
                "type": "string",
                "description": "The keywords to search for locations in the address book.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "addresses",
                "type": "array",
                "description": "The addresses found in the address book. Each address object contains 'location_address' (string, the address of the location in the format of 'street address, city, zip code'), 'name' (string, the name of the location), 'note' (string, the note of the location)."
            }
        ]
    },
    {
        "tool_name": "GoogleMapAddAddress",
        "summary": "Add an address to the address book.",
        "parameters": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the address.",
                "required": true
            },
            {
                "name": "address",
                "type": "string",
                "description": "The address of the location, in the format of 'street address, city, zip code'.",
                "required": true
            },
            {
                "name": "note",
                "type": "string",
                "description": "The note of the address.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation is successful."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotGetCurrentState",
        "summary": "Retrieve the current state of the robot, including the room it is currently in and the objects it has grabbed.",
        "parameters": [],
        "returns": [
            {
                "name": "current_room",
                "type": "string",
                "description": "The unique identifier of the current room where the robot is located."
            },
            {
                "name": "grabbed_objects",
                "type": "array",
                "description": "A list of objects containing information about the objects grabbed by the robot, including details like object_id (the unique identifier of the object, in the format of 'object name' + 'object number', e.g., 'table_1'), object_name (the name of the object), and description (the description of the object)."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotListRooms",
        "summary": "List all the rooms in the building that the robot can navigate to.",
        "parameters": [],
        "returns": [
            {
                "name": "rooms",
                "type": "array",
                "description": "A list of objects containing information about the rooms in the building, including details like room_name (the name of the room) and room_id (the unique identifier of the room, in the format of 'room name' + 'room number', e.g., 'kitchen_1')."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotGoToRoom",
        "summary": "Let the robot safely move to a specified room based on the room's unique identifier. If the robot cannot move to the specified room safely, it will return a message indicating the reason why it cannot move to the specified room safely.",
        "parameters": [
            {
                "name": "room_id",
                "type": "string",
                "description": "The unique identifier of the room to which the robot should move.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "message",
                "type": "string",
                "description": "A message indicating the robot safely moved to the specified room, or the reason why the robot cannot move to the specified room safely."
            },
            {
                "name": "current_room",
                "type": "string",
                "description": "The unique identifier of the current room where the robot is located after executing the command."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotFindObjects",
        "summary": "Let the robot find objects in the current room based on a query. When the robot cannot find any objects that match the query, it will return an empty list.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The query to find objects in the current room. The query can be a name or a description of the object.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "objects",
                "type": "array",
                "description": "A list of objects that match the query, each object includes object_id (the unique identifier of the object), object_name (the name of the object), object_location (the description of the object location, composed of relative position words like 'on', 'inside', 'left of', 'near', etc., and the relative object id, e.g., 'on table_1'), description (the description of the object), and can_be_grabbed (a boolean indicating whether the robot can grab the object)."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotLookAroundObject",
        "summary": "Let the robot look around a specified object and list all objects around the object in the current room.",
        "parameters": [
            {
                "name": "object_id",
                "type": "string",
                "description": "The unique identifier of the object around which the robot should look.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "objects",
                "type": "array",
                "description": "A list of objects that are around the specified object, each object contains object_id (the unique identifier of the object), object_name (the name of the object), object_location (the description of the object location, e.g., 'on the table'), description (the description of the object), and can_be_grabbed (a boolean indicating whether the robot can grab the object)."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotGetAllowedOperations",
        "summary": "Get allowed operations on a specific target object, optionally using the grabbed objects for interaction. The allowed operations include grabbing, placing, and interacting with the target object. The grabbed objects can be used as tools to interact with the target object, for example, using a knife (grabbed object) to cut an organe (target object). The allowed operations must exclusively be applied on the target object instead of other objects in the room. The allowed operations must be retrieved before applying any allowed operation.",
        "parameters": [
            {
                "name": "target_object_id",
                "type": "string",
                "description": "The unique identifier of the target object.",
                "required": true
            },
            {
                "name": "interact_grabbed_object_ids",
                "type": "array",
                "description": "A list of unique identifiers of the grabbed objects that will be used to interact with the target object.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "allowed_operations",
                "type": "array",
                "description": "This parameter refers to an array of objects, each representing an allowed operation on the specifed target object. Each object includes the following properties: 'operation_id' (str) which is a unique identifier for the operation, 'arguments' (object) that denotes the available arguments for the operation along with their valid values or constraints, 'description' (str) that provides an in-depth explanation of the operation's functionality, and 'potential_side_effects' (array) each containing an object with fields 'effect' (str, the potential side effect) and 'probability' (number, the estimated possibility of the side effect occuring on a scale from 0-1)."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotApplyAllowedOperation",
        "summary": "Apply an allowed operation on a specific target object, optionally using the grabbed objects as tools for interaction. The allowed operations must be retrieved using the GetAllowedOperations tool before applying any allowed operation.",
        "parameters": [
            {
                "name": "target_object_id",
                "type": "string",
                "description": "The unique identifier of the target object on which the operation should be applied.",
                "required": true
            },
            {
                "name": "operation_id",
                "type": "string",
                "description": "The unique identifier of the operation to be applied. The unique identifier must be retrieved using the GetAllowedOperations tool.",
                "required": true
            },
            {
                "name": "arguments",
                "type": "object",
                "description": "A dictionary of arguments for the operation. The arguments must match the arguments retrieved using the GetAllowedOperations tool.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "message",
                "type": "string",
                "description": "A message describing the result of the operation, including the other side effects occurred during the operation. If the operation is failed, the message will indicate the reason why the operation is failed."
            },
            {
                "name": "updated_grabbed_objects",
                "type": "array",
                "description": "A list of objects containing information about the objects grabbed by the robot, including details like object_id (the unique identifier of the object), object_name (the name of the object), and description (the description of the object)."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotFindPeople",
        "summary": "Let the robot find people in the current room based on a query. When the robot cannot find any people that match the query, it will return an empty list.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The query to find people in the current room. The query can be a name or a description of the person. If not provided, the robot will find all people in the current room.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "found_people",
                "type": "array",
                "description": "A list of objects containing information about the people that match the query. Each object includes details like person_id (the unique identifier of the person), person_name (the name of the person, should be 'unknown' if the person is not in identified), person_location (the description of the person location, composed of relative position words like 'on', 'inside', 'left of', 'near', etc., and the relative object id, e.g., 'near table_1'), and description (the description of the person, e.g., the person's appearance)."
            }
        ]
    },
    {
        "tool_name": "IndoorRobotHandObjectsToPerson",
        "summary": "Let the robot hand a subset of the grabbed objects to a person.",
        "parameters": [
            {
                "name": "object_ids",
                "type": "array",
                "description": "A list of unique identifiers of the objects to be handed to the user. Must be the ids of the grabbed objects.",
                "required": true
            },
            {
                "name": "person_id",
                "type": "string",
                "description": "The unique identifier of the person to whom the objects should be handed. Must be the id of a person in the current room, returned by the FindPeople tool.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "message",
                "type": "string",
                "description": "A message describing the result of the operation. If the operation is failed, the message will indicate the reason why the operation is failed."
            },
            {
                "name": "updated_grabbed_objects",
                "type": "array",
                "description": "A list of objects containing information about the objects grabbed by the robot, including details like object_id (the unique identifier of the object), object_name (the name of the object), and description (the description of the object)."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemCreateDispatchRequest",
        "summary": "Create an active new emergency dispatch request with available resources.",
        "parameters": [
            {
                "name": "incident_location",
                "type": "string",
                "description": "The location of the incident in the street address format.",
                "required": true
            },
            {
                "name": "resource_ids",
                "type": "array",
                "description": "List of unique identifiers for the dispatch resources to be dispatched.",
                "required": true
            },
            {
                "name": "incident_type",
                "type": "string",
                "description": "The primary type of the incident, one of ['Fire', 'Medical', 'Police'].",
                "required": true
            },
            {
                "name": "incident_severity",
                "type": "string",
                "description": "The severity of the incident, one of ['Low', 'Medium', 'High'].",
                "required": true
            },
            {
                "name": "incident_description",
                "type": "string",
                "description": "A brief description of the incident.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "incident_id",
                "type": "string",
                "description": "The unique identifier of the created dispatch request."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemRedirectDispatchResources",
        "summary": "Redirect a specific dispatch resources to an already existing incident or a new location. If the location is provided, a new incident will be created and the dispatch resources will be redirected to the new incident.",
        "parameters": [
            {
                "name": "resource_ids",
                "type": "array",
                "description": "List of unique identifiers for the dispatch resources to be redirected.",
                "required": true
            },
            {
                "name": "target_type",
                "type": "string",
                "description": "The type of the target location, one of ['Incident', 'Location']."
            },
            {
                "name": "incident_id_or_new_location",
                "type": "string",
                "description": "If 'target_type' is 'Incident', it is 'incident_id' of the incident to which the dispatch resources should be redirected. If 'target_type' is 'Location', it is the 'new_location' to which the dispatch resources should be redirected, in the street address format."
            }
        ],
        "returns": [
            {
                "name": "redirect_result",
                "type": "object",
                "description": "An object containing a boolean 'success' field indicating whether the redirection was successful. If the 'target_type' is 'Location', the object also contains a 'incident_id' field indicating the unique identifier of the incident that was created as a result of the redirection."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemEstimateDispatchTime",
        "summary": "Estimate the dispatch time for a specific dispatch resource to reach a specified location.",
        "parameters": [
            {
                "name": "resource_id",
                "type": "string",
                "description": "The unique identifier of the dispatch resource.",
                "required": true
            },
            {
                "name": "destination_location",
                "type": "string",
                "description": "The destination location for the dispatch resource, in the street address format.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "estimated_time",
                "type": "string",
                "description": "The estimated dispatch time in the format 'HH:mm:ss'."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemFindNearbyResources",
        "summary": "Find nearby dispatch resources based on a specified location and resource type.",
        "parameters": [
            {
                "name": "location",
                "type": "string",
                "description": "The location to find nearby dispatch resources, in the street address format.",
                "required": true
            },
            {
                "name": "resource_type",
                "type": "string",
                "description": "The type of the dispatch resources to find, one of ['Fire', 'Medical', 'Police']. If not provided, all types of dispatch resources will be considered.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "nearby_resources",
                "type": "array",
                "description": "An array of objects for nearby dispatch resources, each object contains 'resource_id', 'resource_type' (one of ['Fire', 'Medical', 'Police']), 'resource_location', 'resource_status' (one of ['Available', 'Dispatched', 'Unavailable']), 'incident_id' (the unique identifier of the incident this resource is dispatched to, only included if the resource is Dispatched), 'distance_to_location' (unit miles)."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemGetIncidentData",
        "summary": "Retrieve incident data for a specified incident.",
        "parameters": [
            {
                "name": "incident_id",
                "type": "string",
                "description": "The unique identifier of the incident to retrieve data for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "incident_data",
                "type": "object",
                "description": "The incident data for the specified incident, contains 'incident_id', 'incident_type' (one of ['Fire', 'Medical', 'Police']), 'incident_location', 'incident_severity' (one of ['Low', 'Medium', 'High']), 'incident_status' (one of ['Active', 'Closed']), 'dispatch_resource_ids', 'dispatch_time', 'incident_description'."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemGetResourceData",
        "summary": "Retrieve data for a specified dispatch resource.",
        "parameters": [
            {
                "name": "resource_id",
                "type": "string",
                "description": "The unique identifier of the dispatch resource to retrieve data for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "resource_data",
                "type": "object",
                "description": "The data for the specified dispatch resource, contains 'resource_id', 'resource_type' (one of ['Fire', 'Medical', 'Police']), 'resource_location', 'resource_status' (one of ['Available', 'Dispatched', 'Unavailable']), 'incident_id' (the unique identifier of the incident this resource is dispatched to, null if not dispatched)."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemEditIncident",
        "summary": "Edit the data for a specified incident. This function should be used to assign new resources to an incident unless they have already been notified; it will NOT notify them of the assignment.",
        "parameters": [
            {
                "name": "incident_id",
                "type": "string",
                "description": "The unique identifier of the incident to edit.",
                "required": true
            },
            {
                "name": "incident_type",
                "type": "string",
                "description": "If provided, the new type of the incident, one of ['Fire', 'Medical', 'Police'].",
                "required": false
            },
            {
                "name": "incident_severity",
                "type": "string",
                "description": "If provided, the new severity of the incident, one of ['Low', 'Medium', 'High'].",
                "required": false
            },
            {
                "name": "incident_description",
                "type": "string",
                "description": "If provided, the new description of the incident.",
                "required": false
            },
            {
                "name": "incident_status",
                "type": "string",
                "description": "If provided, the new status of the incident, one of ['Active', 'Closed'].",
                "required": false
            },
            {
                "name": "resource_ids",
                "type": "array",
                "description": "If provided, the new list of unique identifiers for the dispatch resources assigned to this incident.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "edit_status",
                "type": "boolean",
                "description": "The success status of the edit operation."
            }
        ]
    },
    {
        "tool_name": "EmergencyDispatchSystemSearchIncidents",
        "summary": "Search for incidents based on a specified location and incident type.",
        "parameters": [
            {
                "name": "location",
                "type": "string",
                "description": "The location to search for incidents, in the street address format.",
                "required": true
            },
            {
                "name": "incident_type",
                "type": "string",
                "description": "The type of the incidents to search for, one of ['Fire', 'Medical', 'Police']. If not provided, all types of incidents will be considered.",
                "required": false
            },
            {
                "name": "severity",
                "type": "string",
                "description": "The severity of the incidents to search for, one of ['Low', 'Medium', 'High']. If not provided, all severities of incidents will be considered.",
                "required": false
            },
            {
                "name": "incident_status",
                "type": "string",
                "description": "If provided, the new status of the incident, one of ['Active', 'Closed'].",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "incidents",
                "type": "array",
                "description": "An array of incidents that match the search criteria, each object contains 'incident_id', 'incident_type' (one of ['Fire', 'Medical', 'Police']), 'incident_location', 'incident_severity' (one of ['Low', 'Medium', 'High']), 'incident_status' (one of ['Active', 'Closed']), 'dispatch_resource_ids', 'dispatch_time', 'incident_description'."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerDeploySmartContract",
        "summary": "Deploy a new smart contract on the Ethereum blockchain.",
        "parameters": [
            {
                "name": "contract_bytecode",
                "type": "string",
                "description": "The bytecode for the smart contract.",
                "required": true
            },
            {
                "name": "constructor_args",
                "type": "array",
                "description": "An array of arguments for the smart contract constructor.",
                "required": true
            },
            {
                "name": "gas_limit",
                "type": "integer",
                "description": "The maximum amount of gas to be used for the deployment. Optional.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "contract_address",
                "type": "string",
                "description": "The Ethereum address of the deployed smart contract."
            },
            {
                "name": "transaction_hash",
                "type": "string",
                "description": "The hash of the transaction used to deploy the smart contract."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerCallSmartContractFunction",
        "summary": "Interact with a deployed smart contract by calling one of its functions.",
        "parameters": [
            {
                "name": "contract_address",
                "type": "string",
                "description": "The Ethereum address of the deployed smart contract.",
                "required": true
            },
            {
                "name": "function_name",
                "type": "string",
                "description": "The name of the function to call.",
                "required": true
            },
            {
                "name": "function_args",
                "type": "array",
                "description": "An array of arguments for the function call.",
                "required": true
            },
            {
                "name": "value",
                "type": "string",
                "description": "The amount of Ether to send with the function call. Optional (defaults to 0).",
                "required": false
            },
            {
                "name": "gas_limit",
                "type": "integer",
                "description": "The maximum amount of gas to be used for the function call. Optional.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "return_value",
                "type": "string",
                "description": "The return value of the function call."
            },
            {
                "name": "transaction_hash",
                "type": "string",
                "description": "The hash of the transaction used to call the function (if applicable)."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerTransferEther",
        "summary": "Transfer Ether between Ethereum accounts.",
        "parameters": [
            {
                "name": "from_address",
                "type": "string",
                "description": "The Ethereum address of the sender.",
                "required": true
            },
            {
                "name": "to_address",
                "type": "string",
                "description": "The Ethereum address of the recipient.",
                "required": true
            },
            {
                "name": "amount_ether",
                "type": "number",
                "description": "The amount of Ether to transfer.",
                "required": true
            },
            {
                "name": "gas_limit",
                "type": "integer",
                "description": "The maximum amount of gas to be used for the transfer. Optional.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "transaction_hash",
                "type": "string",
                "description": "The hash of the transaction used to transfer the Ether."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerCreateEthereumAccount",
        "summary": "Create a new Ethereum account with a private key.",
        "parameters": [],
        "returns": [
            {
                "name": "account_address",
                "type": "string",
                "description": "The Ethereum address of the created account."
            },
            {
                "name": "private_key",
                "type": "string",
                "description": "The private key for the created account."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerImportEthereumAccount",
        "summary": "Import an existing Ethereum account using its private key.",
        "parameters": [
            {
                "name": "private_key",
                "type": "string",
                "description": "The private key of the existing Ethereum account.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "account_address",
                "type": "string",
                "description": "The Ethereum address of the imported account."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerEstimateGasCost",
        "summary": "Estimate the gas cost for a smart contract function call.",
        "parameters": [
            {
                "name": "contract_address",
                "type": "string",
                "description": "The Ethereum address of the deployed smart contract.",
                "required": true
            },
            {
                "name": "function_name",
                "type": "string",
                "description": "The name of the function to call.",
                "required": true
            },
            {
                "name": "function_args",
                "type": "array",
                "description": "An array of arguments for the function call.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "gas_estimate",
                "type": "integer",
                "description": "The estimated gas cost for the function call."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerCompileSolidity",
        "summary": "Compile Solidity code into bytecode.",
        "parameters": [
            {
                "name": "contract_code",
                "type": "string",
                "description": "The Solidity code for the smart contract.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "bytecode",
                "type": "string",
                "description": "The compiled bytecode of the Solidity code."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerSignMessage",
        "summary": "Sign a message using an Ethereum account's private key.",
        "parameters": [
            {
                "name": "message",
                "type": "string",
                "description": "The message to be signed.",
                "required": true
            },
            {
                "name": "private_key",
                "type": "string",
                "description": "The private key of the Ethereum account.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "signature",
                "type": "string",
                "description": "The signature of the message."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerVerifyMessage",
        "summary": "Verify a signed message using the Ethereum account's address.",
        "parameters": [
            {
                "name": "message",
                "type": "string",
                "description": "The message to be verified.",
                "required": true
            },
            {
                "name": "signature",
                "type": "string",
                "description": "The signature of the message.",
                "required": true
            },
            {
                "name": "account_address",
                "type": "string",
                "description": "The Ethereum address of the account.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "is_valid",
                "type": "boolean",
                "description": "Whether the signature is valid for the given message and account address."
            }
        ]
    },
    {
        "tool_name": "EthereumManagerQueryEthereumData",
        "summary": "Query Ethereum blockchain data, including account and contract addresses, account balances, and transaction information.",
        "parameters": [
            {
                "name": "query_type",
                "type": "string",
                "description": "The type of data to query; should be one of ['addresses' (includes contract addresses), 'address info', or 'transaction hash']. Addresses may be searched using a prefix or contract name, which may return multiple addresses. Address info and transaction hashes must be queried using an exact address or hash.",
                "required": true
            },
            {
                "name": "query_value",
                "type": "string",
                "description": "The value to query (e.g., address or transaction hash).",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "query_result",
                "type": "string",
                "description": "The result of the query in a human-readable format. Will be either a list of addresses, address info (including a balance, in wei, for EOAs, or contract info for contracts), or transaction information (including any events emitted and whether it was successful / confirmed)."
            }
        ]
    },
    {
        "tool_name": "BinanceGetAccountBalances",
        "summary": "Retrieve the user's account balances for various cryptocurrencies.",
        "parameters": [],
        "returns": [
            {
                "name": "balances",
                "type": "array",
                "description": "An array of objects containing 'currency' (string, one of ['USD', 'BTC', 'ETH', etc.]) and 'available_balance' (number)."
            }
        ]
    },
    {
        "tool_name": "BinanceRetrieveAccounts",
        "summary": "Retrieves user's saved bank accounts for fiat deposits.",
        "parameters": [],
        "returns": [
            {
                "name": "accounts",
                "type": "array",
                "description": "An array of object containing 'account_id' (string), 'account_number' (string), 'bank_name' (string), and 'account_type' (string, one of ['checking', 'savings']), representing the user's saved bank accounts."
            }
        ]
    },
    {
        "tool_name": "BinanceDeposit",
        "summary": "Deposit a specified amount of fiat money to the user's saved account. The account id must be retrieved using the RetrieveAccounts tool.",
        "parameters": [
            {
                "name": "currency",
                "type": "string",
                "description": "The currency to deposit, one of ['USD', 'EUR', 'GBP', etc.].",
                "required": true
            },
            {
                "name": "amount",
                "type": "number",
                "description": "The amount of fiat money to deposit.",
                "required": true
            },
            {
                "name": "from_account_id",
                "type": "string",
                "description": "The user's saved bank account id to deposit funds from.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "transaction_id",
                "type": "string",
                "description": "The unique identifier of the deposit transaction."
            },
            {
                "name": "status",
                "type": "string",
                "description": "The status of the deposit transaction."
            }
        ]
    },
    {
        "tool_name": "BinanceWithdraw",
        "summary": "Withdraw a specified amount of cryptocurrency or fiat money to a specified destination address or bank account from user's account. The bank account id must be retrieved using the RetrieveAccounts tool.",
        "parameters": [
            {
                "name": "currency",
                "type": "string",
                "description": "The currency to withdraw, one of ['USD', 'BTC', 'ETH', etc.].",
                "required": true
            },
            {
                "name": "amount",
                "type": "number",
                "description": "The amount of cryptocurrency to withdraw.",
                "required": true
            },
            {
                "name": "destination_address",
                "type": "string",
                "description": "The suitable blockchain address for withdrawing the cryptocurrency, which must be a complete and valid legacy Bitcoin address or SegWit address.",
                "required": false
            },
            {
                "name": "to_account_id",
                "type": "string",
                "description": "The user's saved bank account id to withdraw fiat money to.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "transaction_id",
                "type": "string",
                "description": "The unique identifier of the withdrawal transaction."
            },
            {
                "name": "status",
                "type": "string",
                "description": "The status of the withdrawal transaction."
            }
        ]
    },
    {
        "tool_name": "BinancePlaceOrder",
        "summary": "Place a buy or sell order for a specified cryptocurrency pair.",
        "parameters": [
            {
                "name": "pair",
                "type": "string",
                "description": "The cryptocurrency pair to trade, for example, 'BTCUSD', 'USDBTC', 'ETHUSD', etc. The first currency in the pair is the base currency, and the second currency is the quote currency.",
                "required": true
            },
            {
                "name": "order_type",
                "type": "string",
                "description": "The order type, one of ['limit', 'market']. 'limit' orders are executed at a specified price or better, while 'market' orders are executed at the best available price.",
                "required": true
            },
            {
                "name": "side",
                "type": "string",
                "description": "The side of the trade, one of ['buy', 'sell'].",
                "required": true
            },
            {
                "name": "quantity",
                "type": "number",
                "description": "The quantity of the cryptocurrency to trade.",
                "required": true
            },
            {
                "name": "price",
                "type": "number",
                "description": "The price of the cryptocurrency to trade, optional for market orders.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "order_id",
                "type": "string",
                "description": "The unique identifier of the placed order."
            },
            {
                "name": "status",
                "type": "string",
                "description": "The status of the placed order."
            }
        ]
    },
    {
        "tool_name": "BinanceModifyOrder",
        "summary": "Modify an existing order by changing its price or quantity.",
        "parameters": [
            {
                "name": "order_id",
                "type": "string",
                "description": "The unique identifier of the order to modify.",
                "required": true
            },
            {
                "name": "new_price",
                "type": "number",
                "description": "The new price of the order.",
                "required": true
            },
            {
                "name": "new_quantity",
                "type": "number",
                "description": "The new quantity of the order.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "modified_order_id",
                "type": "string",
                "description": "The unique identifier of the modified order."
            },
            {
                "name": "status",
                "type": "string",
                "description": "The status of the modified order."
            }
        ]
    },
    {
        "tool_name": "BinanceCancelOrder",
        "summary": "Cancel an existing order.",
        "parameters": [
            {
                "name": "order_id",
                "type": "string",
                "description": "The unique identifier of the order to cancel.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "status",
                "type": "string",
                "description": "The status of the canceled order."
            }
        ]
    },
    {
        "tool_name": "BinanceGetRealTimePrice",
        "summary": "Retrieve real-time price information for a specified cryptocurrency pair.",
        "parameters": [
            {
                "name": "pair",
                "type": "string",
                "description": "The cryptocurrency pair to retrieve real-time price information for, for example, 'BTCUSD', 'USDBTC', 'ETHUSD', etc.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "price",
                "type": "number",
                "description": "Price of first currency in a pair in units of the second currency."
            }
        ]
    },
    {
        "tool_name": "BinanceGetOrderHistory",
        "summary": "Retrieve the user's order history for a specified date range and cryptocurrency pair.",
        "parameters": [
            {
                "name": "date_range",
                "type": "array",
                "description": "An array containing the start and end dates of the date range, in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "pair",
                "type": "string",
                "description": "The cryptocurrency pair to retrieve order history for, for example, 'BTCUSD', 'USDBTC', 'ETHUSD', etc. If not provided, retrieve order history for all pairs.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "orders",
                "type": "array",
                "description": "An array of objects containing 'order_id' (string), 'pair' (string), 'side' (string), 'order_type' (string), 'price' (number), 'quantity' (number), 'timestamp' (string), and 'status' (string)."
            }
        ]
    },
    {
        "tool_name": "BinanceGetTradeHistory",
        "summary": "Retrieve the user's trade history for a specified date range and cryptocurrency pair.",
        "parameters": [
            {
                "name": "date_range",
                "type": "array",
                "description": "An array containing the start and end dates of the date range, in the format 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "pair",
                "type": "string",
                "description": "The cryptocurrency pair to retrieve trade history for, for example, 'BTCUSD', 'USDBTC', 'ETHUSD', etc.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "trades",
                "type": "array",
                "description": "An array of objects containing 'trade_id' (string), 'pair' (string), 'side' (string), 'price' (number), 'quantity' (number), and 'timestamp' (string, format 'YYYY-MM-DD HH:MM:SS')"
            }
        ]
    },
    {
        "tool_name": "ShopifySearchProducts",
        "summary": "Search for products by keywords or filters. If no products match the search query, return an empty list.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "Keywords or filters to search for products.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "Maximum number of results to return. Default is 5, maximum is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "products",
                "type": "array",
                "description": "List of products matching the search query, each is an object containing product_id (string), name (string) price (number, in USD) and description (string)."
            }
        ]
    },
    {
        "tool_name": "ShopifyGetProductDetails",
        "summary": "Retrieve product details by the product ID.",
        "parameters": [
            {
                "name": "product_id",
                "type": "string",
                "description": "Unique identifier of the product.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "name",
                "type": "string",
                "description": "Name of the product."
            },
            {
                "name": "description",
                "type": "string",
                "description": "Description of the product."
            },
            {
                "name": "price",
                "type": "number",
                "description": "Price of the product, in USD."
            },
            {
                "name": "inventory",
                "type": "integer",
                "description": "Inventory of the product."
            },
            {
                "name": "extra_details",
                "type": "object",
                "description": "Extra details of the product."
            }
        ]
    },
    {
        "tool_name": "ShopifyCreateProduct",
        "summary": "Create a new product with the specified information.",
        "parameters": [
            {
                "name": "name",
                "type": "string",
                "description": "Name of the product.",
                "required": true
            },
            {
                "name": "description",
                "type": "string",
                "description": "Description of the product.",
                "required": true
            },
            {
                "name": "price",
                "type": "number",
                "description": "Price of the product, in USD.",
                "required": true
            },
            {
                "name": "inventory",
                "type": "integer",
                "description": "Inventory of the product.",
                "required": true
            },
            {
                "name": "extra_details",
                "type": "object",
                "description": "Extra details of the product.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "Result of the product creation, including 'success' (boolean, indicates whether the product creation was successful) and 'product_id' (string, the unique identifier of the created product, if success is True)."
            }
        ]
    },
    {
        "tool_name": "ShopifyUpdateProduct",
        "summary": "Update product information by the product ID.",
        "parameters": [
            {
                "name": "product_id",
                "type": "string",
                "description": "Unique identifier of the product.",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "New name of the product.",
                "required": false
            },
            {
                "name": "description",
                "type": "string",
                "description": "New description of the product.",
                "required": false
            },
            {
                "name": "price",
                "type": "number",
                "description": "New price of the product, in USD.",
                "required": false
            },
            {
                "name": "inventory",
                "type": "integer",
                "description": "New inventory of the product.",
                "required": false
            },
            {
                "name": "extra_details",
                "type": "object",
                "description": "New extra details of the product.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the product update was successful."
            }
        ]
    },
    {
        "tool_name": "ShopifyDeleteProduct",
        "summary": "Delete a product by the product ID.",
        "parameters": [
            {
                "name": "product_id",
                "type": "string",
                "description": "Unique identifier of the product.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the product deletion was successful."
            }
        ]
    },
    {
        "tool_name": "ShopifySearchOrders",
        "summary": "Search for orders by keywords or filters. If no orders match the search query, return an empty list.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "Keywords or filters to search for orders.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "Maximum number of results to return. Default is 5, maximum is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "orders",
                "type": "array",
                "description": "List of orders matching the search query, each is an object containing order_id (string), customer_username (string), items (array of objects, each contains item name, quantity and subtotal), total_price (number, in USD), and status (string, one of ['draft', 'open', 'pending', 'paid', 'fulfilled', 'cancelled', 'refunded'])."
            }
        ]
    },
    {
        "tool_name": "ShopifyGetOrderDetails",
        "summary": "Retrieve order details by the order ID.",
        "parameters": [
            {
                "name": "order_id",
                "type": "string",
                "description": "Unique identifier of the order.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "customer_username",
                "type": "string",
                "description": "Username of the customer who placed the order."
            },
            {
                "name": "items",
                "type": "array",
                "description": "List of items in the order, each is an object containing product_id (string), product_name (string), quantity (integer) and subtotal (number, in USD)."
            },
            {
                "name": "total_price",
                "type": "number",
                "description": "Total price of the order, in USD."
            },
            {
                "name": "shipping_details",
                "type": "object",
                "description": "Shipping details of the order, including shipping_address (string), shipping_method (string, one of ['USPS', 'UPS', 'FedEx', 'DHL', 'others']), and shipping_date (string, in the format 'YYYY-MM-DD')."
            },
            {
                "name": "status",
                "type": "string",
                "description": "Status of the order that visible to the customer, one of ['draft', 'open', 'pending', 'paid', 'fulfilled', 'cancelled', 'refunded']."
            }
        ]
    },
    {
        "tool_name": "ShopifyDraftOrder",
        "summary": "Draft a new order for a customer to review before payment. The drafted order would be in the 'draft' status.",
        "parameters": [
            {
                "name": "customer_username",
                "type": "string",
                "description": "Username of the customer who will review the order.",
                "required": true
            },
            {
                "name": "items",
                "type": "array",
                "description": "List of items in the order, each is an object containing product_id (string), quantity (integer) and subtotal (number, in USD).",
                "required": true
            },
            {
                "name": "total_price",
                "type": "number",
                "description": "Total price of the order, in USD.",
                "required": true
            },
            {
                "name": "shipping_details",
                "type": "object",
                "description": "Shipping details of the order, including shipping_address (string), shipping_method (string, one of ['USPS', 'UPS', 'FedEx', 'DHL', 'others']), and shipping_date (string, in the format 'YYYY-MM-DD').",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "result",
                "type": "object",
                "description": "Result of the order creation, including 'success' (boolean, indicates whether the order creation was successful) and 'order_id' (string, the unique identifier of the created order, if success is True)."
            }
        ]
    },
    {
        "tool_name": "ShopifyManageOrder",
        "summary": "Manage an existing order by the order ID. The action can be 'update', 'fulfill', 'cancel', or 'refund'. For 'update', the order details can be changed, can only be performed on orders in 'draft', 'open', or 'pending' status. The 'fulfill' action applies on a 'paid' order and changes the status to 'fulfilled'. The 'cancel' action cannot be performed on a 'cancelled' or 'refunded' order. The 'refund' action applies on a 'fulfilled' order and changes the status to 'refunded'.",
        "parameters": [
            {
                "name": "order_id",
                "type": "string",
                "description": "Unique identifier of the order.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the order, one of ['update', 'fulfill', 'cancel', 'refund'].",
                "required": true
            },
            {
                "name": "items",
                "type": "array",
                "description": "List of items in the order, each is an object containing product_id (string), quantity (integer) and subtotal (number, in USD). Only allowed for 'update' action.",
                "required": false
            },
            {
                "name": "total_price",
                "type": "number",
                "description": "New total price of the order, in USD. Only allowed for 'update' action.",
                "required": false
            },
            {
                "name": "shipping_details",
                "type": "object",
                "description": "New shipping details of the order, including shipping_address (string), shipping_method (string, one of ['USPS', 'UPS', 'FedEx', 'DHL', 'others']), and shipping_date (string, in the format 'YYYY-MM-DD'). Only allowed for 'update' action.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates whether the order management was successful."
            }
        ]
    },
    {
        "tool_name": "ShopifySearchCustomers",
        "summary": "Search for customers by keywords or filters. If no customers match the search query, return an empty list.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "Keywords or filters to search for customers.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "Maximum number of results to return. Default is not limited.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "customers",
                "type": "array",
                "description": "List of customers matching the search query, each is an object containing username, fullname, email, and address."
            }
        ]
    },
    {
        "tool_name": "ShopifyGetStoreAnalytics",
        "summary": "Retrieve store analytics data, such as revenue, orders, and traffic.",
        "parameters": [
            {
                "name": "start_date",
                "type": "string",
                "description": "Start date of the analytics data in YYYY-MM-DD format.",
                "required": true
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "End date of the analytics data in YYYY-MM-DD format.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "analytics_data",
                "type": "object",
                "description": "Analytics data including revenue, orders, and traffic for the specified date range."
            }
        ]
    },
    {
        "tool_name": "FedExShipManagerGetQuote",
        "summary": "Get a quote for shipping a package.",
        "parameters": [
            {
                "name": "package_details",
                "type": "object",
                "description": "The package details, must include the keys 'description' (string), 'weight' (number, in grams), and 'dimensions' (string, h*w*d in cm).",
                "required": true
            },
            {
                "name": "sender_information",
                "type": "object",
                "description": "The sender information, including full name, address and contact number. The address and contact number must be valid.",
                "required": true
            },
            {
                "name": "recipient_information",
                "type": "object",
                "description": "The recipient information, including full name, address and contact number. The address and contact number must be valid.",
                "required": true
            },
            {
                "name": "pickup_time",
                "type": "string",
                "description": "The desired pickup time with format 'YYYY-MM-DD:HH:MM:SS'.",
                "required": true
            },
            {
                "name": "special_handling",
                "type": "array",
                "description": "The desired special handling, one or more of ['signature_required', 'fragile', 'oversized', 'dangerous_goods', 'temperature_sensitive'].",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "quote_id",
                "type": "string",
                "description": "The unique identifier of the shipping quote."
            },
            {
                "name": "shipping_quote",
                "type": "object",
                "description": "An object containing the shipping quote details, for each possible shipping method (one of ['ground', 'express', 'overnight', '2-day']), including the shipping cost (number, in USD) and estimated delivery date (string, format 'YYYY-MM-DD:HH:MM:SS')."
            }
        ]
    },
    {
        "tool_name": "FedExShipManagerCreateShipmentLabel",
        "summary": "Creates a shipping label for a package.",
        "parameters": [
            {
                "name": "quote_id",
                "type": "string",
                "description": "The unique identifier of the shipping quote.",
                "required": true
            },
            {
                "name": "shipping_method",
                "type": "string",
                "description": "The desired shipping method, one of ['ground', 'express', 'overnight', '2-day'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "shipment_id",
                "type": "string",
                "description": "The unique identifier of the shipment."
            }
        ]
    },
    {
        "tool_name": "FedExShipManagerGetShipmentDetails",
        "summary": "Displays the current status, estimated delivery date, and other details of a shipment.",
        "parameters": [
            {
                "name": "shipment_id",
                "type": "string",
                "description": "The unique identifier of the shipment to be tracked.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "shipment_status",
                "type": "object",
                "description": "The current status of the shipment, including a status, detailed description and timestamp (with the format 'YYYY-MM-DD:HH:MM:SS'). The status name is one of ['pending', 'in_transit', 'delivered']."
            },
            {
                "name": "sender_information",
                "type": "object",
                "description": "The sender information, including full name, address and contact number. The address and contact number must be valid."
            },
            {
                "name": "recipient_information",
                "type": "object",
                "description": "The recipient information, including full name, address and contact number. The address and contact number must be valid."
            },
            {
                "name": "dates",
                "type": "object",
                "description": "The dates of the shipment, including the pickup date, actual pickup date, estimated delivery date, and actual delivery date (if applicable). All dates are in the format 'YYYY-MM-DD:HH:MM:SS'."
            },
            {
                "name": "package_details",
                "type": "object",
                "description": "The details of the package, including its weight and dimensions."
            },
            {
                "name": "shipping_method",
                "type": "string",
                "description": "The desired shipping method, one of ['ground', 'international', 'overnight', '2-day']."
            },
            {
                "name": "special_handling",
                "type": "array",
                "description": "The desired special handling, one or more of ['signature_required', 'fragile', 'oversized', 'dangerous_goods', 'temperature_sensitive']."
            }
        ]
    },
    {
        "tool_name": "FedExShipManagerManageShipment",
        "summary": "Manages shipments, including redirecting, rescheduling pickup, returning to sender, and cancelling.",
        "parameters": [
            {
                "name": "shipment_id",
                "type": "string",
                "description": "The unique identifier of the shipment.",
                "required": true
            },
            {
                "name": "operation",
                "type": "string",
                "description": "The operation to be performed, can only be one of ['cancel', 'reschedule_pickup', 'redirect', 'return_to_sender']. 'cancel' and 'reschedule_pickup' operations can only be performed when the status of the shipment is 'pending'. 'redirect' and 'return_to_sender' operations can only be performed when the status of the shipment is 'in_transit'.",
                "required": true
            },
            {
                "name": "new_receipient_information",
                "type": "object",
                "description": "The new recipient information, including full name, address and contact number, required for redirect operation.",
                "required": false
            },
            {
                "name": "new_pickup_time",
                "type": "string",
                "description": "The new pickup time, required for reschedule operation, with format 'YYYY-MM-DD:HH:MM:SS'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "operation_status",
                "type": "boolean",
                "description": "Whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "FedExShipManagerSearchShipment",
        "summary": "Searches for User's existing shipments.",
        "parameters": [
            {
                "name": "search_term",
                "type": "string",
                "description": "The term to search for in the shipment details.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "shipments",
                "type": "array",
                "description": "The shipments that match the search term, each shipment is an object containing the shipment id and shipment status."
            }
        ]
    },
    {
        "tool_name": "FedExShipManagerSearchSavedAddresses",
        "summary": "Searches for user's saved addresses and contact numbers.",
        "parameters": [
            {
                "name": "search_term",
                "type": "string",
                "description": "The term to search for in the address details.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "addresses",
                "type": "array",
                "description": "A list of objects, each containing remark, full name, address and contact number."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemAddItem",
        "summary": "Add a new item to the inventory.",
        "parameters": [
            {
                "name": "item_name",
                "type": "string",
                "description": "The name of the item, must be a non-empty string.",
                "required": true
            },
            {
                "name": "category",
                "type": "string",
                "description": "The category of the item, must be a non-empty string.",
                "required": true
            },
            {
                "name": "quantity",
                "type": "integer",
                "description": "The quantity of the item, must be a positive integer.",
                "required": true
            },
            {
                "name": "supplier",
                "type": "string",
                "description": "The supplier of the item, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "description",
                "type": "string",
                "description": "The description of the item, must be a non-empty string if provided.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "item_id",
                "type": "string",
                "description": "The unique identifier of the added item."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemUpdateItem",
        "summary": "Update an existing item in the inventory.",
        "parameters": [
            {
                "name": "item_id",
                "type": "string",
                "description": "The unique identifier of the item, must be a non-empty string.",
                "required": true
            },
            {
                "name": "item_name",
                "type": "string",
                "description": "The new name of the item, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "category",
                "type": "string",
                "description": "The new category of the item, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "quantity",
                "type": "integer",
                "description": "The new quantity of the item, must be a positive integer if provided.",
                "required": false
            },
            {
                "name": "supplier",
                "type": "string",
                "description": "The new supplier of the item, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "description",
                "type": "string",
                "description": "The new description of the item, must be a non-empty string if provided.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the item update was successful."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemDeleteItem",
        "summary": "Delete an item from the inventory.",
        "parameters": [
            {
                "name": "item_id",
                "type": "string",
                "description": "The unique identifier of the item, must be a non-empty string.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the item deletion was successful."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemSearchItems",
        "summary": "Search for items in the inventory by keyword or category.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword to search for in the item name, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "category",
                "type": "string",
                "description": "The category to search for, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "page",
                "type": "integer",
                "description": "The page number to retrieve, must be a positive integer if provided. Default is 1.",
                "required": false
            },
            {
                "name": "results_per_page",
                "type": "integer",
                "description": "The maximum number of results per page, must be a positive integer if provided. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "items",
                "type": "array",
                "description": "A list of objects containing the 'item_id', 'item_name', 'category', and 'quantity' of each matching item."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemGetItemDetails",
        "summary": "Get detailed information about an item in the inventory.",
        "parameters": [
            {
                "name": "item_id",
                "type": "string",
                "description": "The unique identifier of the item, must be a non-empty string.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "item_name",
                "type": "string",
                "description": "The name of the item."
            },
            {
                "name": "category",
                "type": "string",
                "description": "The category of the item."
            },
            {
                "name": "quantity",
                "type": "integer",
                "description": "The quantity of the item."
            },
            {
                "name": "supplier",
                "type": "string",
                "description": "The supplier of the item."
            },
            {
                "name": "description",
                "type": "string",
                "description": "The description of the item."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemTrackInventory",
        "summary": "Track inventory levels and receive notifications when stock levels are low.",
        "parameters": [
            {
                "name": "threshold",
                "type": "integer",
                "description": "The stock level threshold, must be a positive integer.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "low_stock_items",
                "type": "array",
                "description": "A list of objects containing the 'item_id', 'item_name', 'category', and 'quantity' of each item with stock levels below the threshold."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemSetupAlert",
        "summary": "Set up an alert for a specific item or category when the stock reaches a certain threshold.",
        "parameters": [
            {
                "name": "alert_id",
                "type": "string",
                "description": "The unique identifier of the alert, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "item_id",
                "type": "string",
                "description": "The unique identifier of the item, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "category",
                "type": "string",
                "description": "The category of the item, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "threshold",
                "type": "integer",
                "description": "The stock level threshold, must be a positive integer.",
                "required": true
            },
            {
                "name": "operation",
                "type": "string",
                "description": "The operation to perform on the alert, must be one of ['add', 'update', 'delete'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the alert setup was successful."
            },
            {
                "name": "alert_id",
                "type": "string",
                "description": "The unique identifier of the alert."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemSearchSuppliers",
        "summary": "Search for suppliers by keyword.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword to search for in the supplier name, must be a non-empty string if provided.",
                "required": false
            },
            {
                "name": "page",
                "type": "integer",
                "description": "The page number to retrieve, must be a positive integer if provided. Default is 1.",
                "required": false
            },
            {
                "name": "results_per_page",
                "type": "integer",
                "description": "The maximum number of results per page, must be a positive integer if provided. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "suppliers",
                "type": "array",
                "description": "A list of objects containing the 'supplier_id', 'supplier_name', and 'item_count' of each matching supplier."
            }
        ]
    },
    {
        "tool_name": "InventoryManagementSystemListCategories",
        "summary": "List available categories in the inventory.",
        "parameters": [
            {
                "name": "page",
                "type": "integer",
                "description": "The page number to retrieve, must be a positive integer if provided. Default is 1.",
                "required": false
            },
            {
                "name": "results_per_page",
                "type": "integer",
                "description": "The maximum number of results per page, must be a positive integer if provided. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "categories",
                "type": "array",
                "description": "A list of objects containing the 'category_id', 'category_name', and 'item_count' of each available category."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaBlockDomain",
        "summary": "Block access to a specific domain.",
        "parameters": [
            {
                "name": "domain",
                "type": "string",
                "description": "The domain to be blocked.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the domain was successfully blocked."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaUnblockDomain",
        "summary": "Unblock access to a specific domain.",
        "parameters": [
            {
                "name": "domain",
                "type": "string",
                "description": "The domain to be unblocked.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the domain was successfully unblocked."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaVerifyDomain",
        "summary": "Verify a domain by checking if it is safe.",
        "parameters": [
            {
                "name": "domain",
                "type": "string",
                "description": "The domain to be verified.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "is_safe",
                "type": "boolean",
                "description": "Whether the domain is safe."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaSearchThreats",
        "summary": "Search for potential threats based on a keyword or domain.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword or domain to search for threats.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "threats",
                "type": "array",
                "description": "A list of objects, each object contains 'threat_id' (string), 'domain' (string), 'description' (string), and 'severity' (string)."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaGetThreatDetails",
        "summary": "Get detailed information about a specific threat.",
        "parameters": [
            {
                "name": "threat_id",
                "type": "string",
                "description": "The unique identifier of the threat.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "threat_details",
                "type": "object",
                "description": "An object containing 'threat_id' (string), 'domain' (string), 'description' (string), 'severity' (string), 'first_seen' (string, formatted as 'YYYY-MM-DD'), 'last_seen' (string, formatted as 'YYYY-MM-DD')."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaSearchPolicy",
        "summary": "Search for security policies based on a keyword.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword to search for policies.",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of policies to search for. One of ['whitelist', 'blacklist']. If not specified, all policies will be searched.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "policies",
                "type": "array",
                "description": "A list of objects, each object contains 'policy_id' (string), 'policy_name' (string), 'policy_description' (string), and 'policy_type' (string, one of ['whitelist', 'blacklist'])."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaCreatePolicy",
        "summary": "Create a new security policy.",
        "parameters": [
            {
                "name": "policy_name",
                "type": "string",
                "description": "The name of the policy.",
                "required": true
            },
            {
                "name": "policy_description",
                "type": "string",
                "description": "A brief description of the policy.",
                "required": true
            },
            {
                "name": "policy_type",
                "type": "string",
                "description": "The type of the policy. One of ['whitelist', 'blacklist'].",
                "required": true
            },
            {
                "name": "domains",
                "type": "array",
                "description": "An array of strings, each string is a domain to be added to the policy.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "policy_id",
                "type": "string",
                "description": "The unique identifier of the created policy."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaUpdatePolicy",
        "summary": "Update an existing security policy.",
        "parameters": [
            {
                "name": "policy_id",
                "type": "string",
                "description": "The unique identifier of the policy to be updated.",
                "required": true
            },
            {
                "name": "policy_name",
                "type": "string",
                "description": "The new name of the policy.",
                "required": false
            },
            {
                "name": "policy_description",
                "type": "string",
                "description": "The new description of the policy.",
                "required": false
            },
            {
                "name": "policy_type",
                "type": "string",
                "description": "The new type of the policy. One of ['whitelist', 'blacklist'].",
                "required": false
            },
            {
                "name": "domains",
                "type": "array",
                "description": "An array of strings, each string is a domain to be added to the policy.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the policy was successfully updated."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaDeletePolicy",
        "summary": "Delete an existing security policy.",
        "parameters": [
            {
                "name": "policy_id",
                "type": "string",
                "description": "The unique identifier of the policy to be deleted.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the policy was successfully deleted."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaGetPolicyDetails",
        "summary": "Get detailed information about a specific security policy.",
        "parameters": [
            {
                "name": "policy_id",
                "type": "string",
                "description": "The unique identifier of the policy.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "policy_details",
                "type": "object",
                "description": "An object containing 'policy_id' (string), 'policy_name' (string), 'policy_description' (string), 'policy_type' (string, one of ['whitelist', 'blacklist']), and 'domains' (array of strings)."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaSearchLogs",
        "summary": "Search for security logs based on a keyword, date range, or event type.",
        "parameters": [
            {
                "name": "keyword",
                "type": "string",
                "description": "The keyword to search for logs.",
                "required": false
            },
            {
                "name": "start_date",
                "type": "string",
                "description": "The start date of the date range to search, formatted as 'YYYY-MM-DD'.",
                "required": false
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "The end date of the date range to search, formatted as 'YYYY-MM-DD'.",
                "required": false
            },
            {
                "name": "event_type",
                "type": "string",
                "description": "One of ['allowed', 'blocked'].",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "logs",
                "type": "array",
                "description": "A list of objects, each object contains 'log_id' (string), 'timestamp' (string, formatted as 'YYYY-MM-DD HH:mm:ss'), 'event_type' (string, one of ['allowed', 'blocked']), 'domain' (string), 'user' (string)."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaGetLogDetails",
        "summary": "Get detailed information about a specific security log.",
        "parameters": [
            {
                "name": "log_id",
                "type": "string",
                "description": "The unique identifier of the log.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "log_details",
                "type": "object",
                "description": "An object containing 'log_id' (string), 'timestamp' (string, formatted as 'YYYY-MM-DD HH:mm:ss'), 'event_type' (string, one of ['allowed', 'blocked']), 'domain' (string), 'user' (string), 'device' (string), 'location' (string)."
            }
        ]
    },
    {
        "tool_name": "CiscoUmbrellaGenerateReport",
        "summary": "Generate a security report based on a date range and report type.",
        "parameters": [
            {
                "name": "start_date",
                "type": "string",
                "description": "The start date of the date range for the report, formatted as 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "The end date of the date range for the report, formatted as 'YYYY-MM-DD'.",
                "required": true
            },
            {
                "name": "report_type",
                "type": "string",
                "description": "One of ['summary', 'detailed'].",
                "required": true
            },
            {
                "name": "download",
                "type": "boolean",
                "description": "Whether to download the report. Default is false.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the report was successfully generated."
            },
            {
                "name": "report_path",
                "type": "string",
                "description": "The path to the generated report, empty if 'download' is false."
            },
            {
                "name": "report_content",
                "type": "string",
                "description": "The content of the generated report, empty if 'download' is true."
            }
        ]
    },
    {
        "tool_name": "GitHubSearchRepositories",
        "summary": "Search for repositories by keywords and scope. The user can search all repositories on Github, owned repositories, or member repositories. When the keywords are not provided, the user can search for all repositories in the specified scope.",
        "parameters": [
            {
                "name": "keywords",
                "type": "string",
                "description": "The keywords to search for in the repositories. Default is search for all repositories in the specified scope.",
                "required": false
            },
            {
                "name": "search_scope",
                "type": "string",
                "description": "The scope of the search. Can be 'all' (all repositories on Github), 'owned' (only repositories the user owns), 'member' (only repositories where the user is a collaborator on). Default is 'all'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 5, maximum is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "repositories",
                "type": "array",
                "description": "Each object contains id (string), name (string), owner_username (string), description (string), url (string), is_owner (boolean), is_member (boolean), and is_public (boolean)."
            }
        ]
    },
    {
        "tool_name": "GitHubGetRepositoryDetails",
        "summary": "Retrieve repository details, including issues, branches.",
        "parameters": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the repository.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "details",
                "type": "object",
                "description": "Contains name (string), owner (string), description (string), url (string), branches (array of branch names), visibility (string, one of ['public', 'private']), last_updated (string, format: 'YYYY-MM-DD:HH:MM:SS') and statistics (including number of issues, number of stars, number of forks)."
            }
        ]
    },
    {
        "tool_name": "GitHubCreateRepository",
        "summary": "Create a repository in the user's account.",
        "parameters": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the repository.",
                "required": true
            },
            {
                "name": "visibility",
                "type": "string",
                "description": "The visibility of the repository, one of ['public', 'private'].",
                "required": true
            },
            {
                "name": "description",
                "type": "string",
                "description": "The description of the repository.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the created repository."
            }
        ]
    },
    {
        "tool_name": "GitHubDeleteRepository",
        "summary": "Delete a user owned repository. Only valid if the user owns the repository.",
        "parameters": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the repository.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates if the operation was successful."
            }
        ]
    },
    {
        "tool_name": "GitHubUpdateRespository",
        "summary": "Update a user owned repository's name, description, or visibility. Only valid if the user owns the repository.",
        "parameters": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the repository.",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The new name of the repository.",
                "required": false
            },
            {
                "name": "description",
                "type": "string",
                "description": "The new description of the repository.",
                "required": false
            },
            {
                "name": "visibility",
                "type": "string",
                "description": "The new visibility of the repository, one of ['public', 'private'].",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates if the operation was successful."
            }
        ]
    },
    {
        "tool_name": "GitHubPostIssue",
        "summary": "Create issues in a repository.",
        "parameters": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the repository.",
                "required": true
            },
            {
                "name": "title",
                "type": "string",
                "description": "The title of the issue.",
                "required": true
            },
            {
                "name": "body",
                "type": "string",
                "description": "The body of the issue.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates if the operation was successful."
            },
            {
                "name": "issue_id",
                "type": "string",
                "description": "The unique identifier of the created issue."
            }
        ]
    },
    {
        "tool_name": "GitHubSearchIssues",
        "summary": "Search for issues in a repository by keywords.",
        "parameters": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the repository.",
                "required": true
            },
            {
                "name": "keywords",
                "type": "string",
                "description": "The keywords to search for in the issues.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 5, maximum is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "issues",
                "type": "array",
                "description": "A list of issues matching the search criteria, each issue is a dictionary with keys 'issue_id' and 'title'."
            }
        ]
    },
    {
        "tool_name": "GitHubReadIssue",
        "summary": "Retrieve issue details in a repository.",
        "parameters": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the repository.",
                "required": true
            },
            {
                "name": "issue_id",
                "type": "string",
                "description": "The unique identifier of the issue.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "details",
                "type": "object",
                "description": "Contains title (string), body (string), state (string), timestamp (string, format: 'YYYY-MM-DD:HH:MM:SS'), and comments (array of string)."
            }
        ]
    },
    {
        "tool_name": "GitHubManageCollaborator",
        "summary": "Add or remove repository collaborators. Only valid if the user owns the repository.",
        "parameters": [
            {
                "name": "repo_id",
                "type": "string",
                "description": "The unique identifier of the repository.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform. Can be 'add' or 'remove'.",
                "required": true
            },
            {
                "name": "collaborator_username",
                "type": "string",
                "description": "The username of the collaborator.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Indicates if the operation was successful."
            }
        ]
    },
    {
        "tool_name": "GitHubSearchUsers",
        "summary": "Search for users by keywords.",
        "parameters": [
            {
                "name": "keywords",
                "type": "string",
                "description": "The keywords to search for in the users.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return. Default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "usernames",
                "type": "array",
                "description": "The usernames of the users that match the keywords."
            }
        ]
    },
    {
        "tool_name": "GitHubGetUserDetails",
        "summary": "Retrieve user details.",
        "parameters": [
            {
                "name": "username",
                "type": "string",
                "description": "The username of the user.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "details",
                "type": "object",
                "description": "Contains username (string), name (string), email (string), short_bio (string)."
            }
        ]
    },
    {
        "tool_name": "SpokeoSearchPeople",
        "summary": "Search for people by name, email, phone number, or address.",
        "parameters": [
            {
                "name": "search_term",
                "type": "string",
                "description": "The search term.",
                "required": true
            },
            {
                "name": "search_type",
                "type": "string",
                "description": "The type of search: 'name', 'email', 'phone', 'address', must be one of these four values.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return, default is 10, must be a positive integer.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "results",
                "type": "array",
                "description": "A list of objects, each object contains 'unique_id' (string), 'name' (string), 'location' (string), 'age_range' (string), and 'related_to' (array of strings)."
            }
        ]
    },
    {
        "tool_name": "SpokeoGetPersonDetails",
        "summary": "Retrieve personal data for a specific person using their unique identifier.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "person_data",
                "type": "object",
                "description": "An object containing 'name' (string), 'location' (string), 'age_range' (string), 'related_to' (array of strings), 'contact_info' (object, contains 'phone_numbers' (array of strings), 'email_addresses' (array of strings), and 'addresses' (array of strings)), 'social_profiles' (array of strings), and 'public_records' (array of strings)."
            }
        ]
    },
    {
        "tool_name": "SpokeoBackgroundCheck",
        "summary": "Perform a background check on a person using their unique identifier.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "background_data",
                "type": "object",
                "description": "An object containing 'criminal_records' (array of strings), 'court_records' (array of strings), 'employment_history' (array of strings), 'education_history' (array of strings), and 'licenses' (array of strings)."
            }
        ]
    },
    {
        "tool_name": "SpokeoVerifyIdentity",
        "summary": "Verify a person's identity using their unique identifier and provided data.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            },
            {
                "name": "provided_data",
                "type": "object",
                "description": "The data to be verified, must match the format of the data in 'person_data'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "verification_result",
                "type": "boolean",
                "description": "True if the provided data matches the person's data, false otherwise."
            }
        ]
    },
    {
        "tool_name": "SpokeoMonitorDataChanges",
        "summary": "Monitor changes in a person's personal data using their unique identifier.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "data_changes",
                "type": "array",
                "description": "A list of objects, each object contains 'changed_data' (object, contains the changed data in the same format as 'person_data'), 'timestamp' (string, the timestamp of the change, in ISO 8601 format)."
            }
        ]
    },
    {
        "tool_name": "SpokeoGetHistoricalData",
        "summary": "Retrieve historical data on a person using their unique identifier.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "historical_data",
                "type": "array",
                "description": "A list of objects, each object contains 'historical_data' (object, contains the historical data in the same format as 'person_data'), 'timestamp' (string, the timestamp of the data, in ISO 8601 format)."
            }
        ]
    },
    {
        "tool_name": "SpokeoAccessCourtRecords",
        "summary": "Access court records for a person using their unique identifier.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "court_records",
                "type": "array",
                "description": "A list of objects, each object contains 'court_record_data' (string), 'timestamp' (string, the timestamp of the court record, in ISO 8601 format)."
            }
        ]
    },
    {
        "tool_name": "SpokeoGetCriminalHistory",
        "summary": "Retrieve a person's criminal history using their unique identifier.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "criminal_history",
                "type": "array",
                "description": "A list of objects, each object contains 'criminal_record_data' (string), 'timestamp' (string, the timestamp of the criminal record, in ISO 8601 format)."
            }
        ]
    },
    {
        "tool_name": "SpokeoReversePhoneLookup",
        "summary": "Perform a reverse phone lookup using a phone number.",
        "parameters": [
            {
                "name": "phone_number",
                "type": "string",
                "description": "The phone number to look up, must be a valid phone number.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "lookup_result",
                "type": "object",
                "description": "An object containing the person's 'unique_id' (string), 'name' (string), 'location' (string), 'age_range' (string), and 'related_to' (array of strings)."
            }
        ]
    },
    {
        "tool_name": "SpokeoDownloadPublicRecord",
        "summary": "Download a specific public record for a person using their unique identifier and the record identifier.",
        "parameters": [
            {
                "name": "unique_id",
                "type": "string",
                "description": "The unique identifier of the person, must be a valid unique identifier.",
                "required": true
            },
            {
                "name": "record_id",
                "type": "string",
                "description": "The unique identifier of the public record, must be a valid record identifier.",
                "required": true
            },
            {
                "name": "local_file_path",
                "type": "string",
                "description": "The local file path to save the downloaded record, must be a valid file path.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "download_status",
                "type": "boolean",
                "description": "True if the download was successful, false otherwise."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRSearchPatients",
        "summary": "Search for patients by patient's name, ID, or other information (such as demographic information or disease)",
        "parameters": [
            {
                "name": "search_term",
                "type": "string",
                "description": "The search term to use for finding patients, it can be a patient's name, ID, or other information.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "patients_info",
                "type": "array",
                "description": "An array of objects of patient information, each containing fields 'patient_id', 'name', 'age', 'gender'."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRGetPatientDetails",
        "summary": "Retrieve patient demographics and clinical data, such as medications, allergies, and conditions.",
        "parameters": [
            {
                "name": "patient_id",
                "type": "string",
                "description": "The unique identifier of the patient.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "patient_data",
                "type": "object",
                "description": "The patient demographics and clinical data, including fields 'name', 'age', 'gender', 'contact_info', 'medications', 'allergies', and 'conditions'."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRSearchDoctors",
        "summary": "Search for doctors by doctor's name, ID, or specialty.",
        "parameters": [
            {
                "name": "search_term",
                "type": "string",
                "description": "The search term to use for finding doctors, it can be a doctor's name, ID, or specialty.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "doctors_info",
                "type": "array",
                "description": "An array of objects of doctor information, each containing fields 'doctor_id', 'name', 'specialty', 'contact_info'."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRManageClinicalDocuments",
        "summary": "List, create, update, and delete clinical documents, such as discharge summaries and progress notes.",
        "parameters": [
            {
                "name": "patient_id",
                "type": "string",
                "description": "The unique identifier of the patient. The identifier should be a string of alphanumeric characters.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the clinical document. The value should be one of ['list', 'create', 'update', 'delete'].",
                "required": true
            },
            {
                "name": "document_id",
                "type": "string",
                "description": "The unique identifier of the clinical document, required for update and delete actions.",
                "required": false
            },
            {
                "name": "document_data",
                "type": "object",
                "description": "The clinical document data, required for create and update actions. The object includes fields such as 'type', 'date', 'summary', and 'details'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return for the list action, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            },
            {
                "name": "documents",
                "type": "array",
                "description": "An array of objects each containing the 'document_id' and 'document_data' (including fields such as 'type', 'date', 'summary', and 'details'). Returned the created document for the create action and listed documents for the list action, otherwise empty."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRManageAppointments",
        "summary": "List, access, create, update, and delete patient appointments.",
        "parameters": [
            {
                "name": "patient_id",
                "type": "string",
                "description": "The unique identifier of the patient. The identifier should be a string of alphanumeric characters.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the appointment. The value should be one of ['list', 'create', 'update', 'delete'].",
                "required": true
            },
            {
                "name": "appointment_id",
                "type": "string",
                "description": "The unique identifier of the appointment, required for update and delete actions.",
                "required": false
            },
            {
                "name": "appointment_data",
                "type": "object",
                "description": "The appointment data, required for create and update actions. The object includes fields such as 'date', 'time', 'location', and 'doctor_id'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return for the list action, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            },
            {
                "name": "appointments",
                "type": "array",
                "description": "An array of objects each containing the 'appointment_id' and 'appointment_data' (including fields such as 'date', 'time', 'location', 'doctor_id', and 'doctor_name'). Returned the created appointment for the create action and listed appointments for the list action, otherwise empty."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRManagePatientRecords",
        "summary": "List, create, update, and delete patient records.",
        "parameters": [
            {
                "name": "patient_id",
                "type": "string",
                "description": "The unique identifier of the patient. The identifier should be a string of alphanumeric characters.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the patient record. The value should be one of ['list', 'create', 'update', 'delete'].",
                "required": true
            },
            {
                "name": "record_data",
                "type": "object",
                "description": "The patient record data, required for create and update actions. The object includes fields such as 'name', 'age', 'gender', 'medications', 'allergies', and 'conditions'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return for the list action, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            },
            {
                "name": "patient_records",
                "type": "array",
                "description": "An array of objects each containing the 'patient_id' and 'record_data' (including fields such as 'name', 'age', 'gender', 'medications', 'allergies', and 'conditions'). Returned the created record for the create action and listed records for the list action, otherwise empty."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRManageDiagnosticReports",
        "summary": "List, access, and manage patient diagnostic reports.",
        "parameters": [
            {
                "name": "patient_id",
                "type": "string",
                "description": "The unique identifier of the patient. The identifier should be a string of alphanumeric characters.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "The action to perform on the diagnostic report. The value should be one of ['list', 'create', 'update', 'delete'].",
                "required": true
            },
            {
                "name": "report_id",
                "type": "string",
                "description": "The unique identifier of the diagnostic report, required for update and delete actions. The identifier should be a string of alphanumeric characters.",
                "required": false
            },
            {
                "name": "report_data",
                "type": "object",
                "description": "The diagnostic report data, required for create and update actions. The object includes fields such as 'type', 'date', 'results', 'interpretation', 'doctor_id', 'doctor_name'.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return for the list action, default is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            },
            {
                "name": "diagnostic_reports",
                "type": "array",
                "description": "An array of objects each containing the 'report_id' and 'report_data' (including fields such as 'type', 'date', 'results', and 'interpretation'). Returned the created report for the create action and listed reports for the list action, otherwise empty."
            }
        ]
    },
    {
        "tool_name": "EpicFHIRDownloadFiles",
        "summary": "Download files by their unique identifiers.",
        "parameters": [
            {
                "name": "file_ids",
                "type": "array",
                "description": "The unique identifiers of the files to download. Each should be a valid 'document_id', 'record_id' or 'report_id'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the operation was successful."
            },
            {
                "name": "file_paths",
                "type": "array",
                "description": "The list of local paths of the downloaded files. Returned if the file was successfully downloaded, otherwise empty."
            }
        ]
    },
    {
        "tool_name": "TrafficControlSearchLocations",
        "summary": "Searches for locations (roads or intersections) by name.",
        "parameters": [
            {
                "name": "location_name",
                "type": "string",
                "description": "The name of the location to search for.",
                "required": true
            },
            {
                "name": "location_type",
                "type": "string",
                "description": "The type of the location to search for, can only be 'road' or 'intersection'. If not specified, both types are searched.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "locations",
                "type": "array",
                "description": "A list of locations matching the search query, each is an object containing 'location_id' (string, the unique identifier of the location), 'location_type' (string, the type of the location, can only be 'road', 'intersection'), and 'location_name' (string, the name of the location, for intersections it is the name of the first road followed by the name of the second road, e.g., 'Main St and 1st Ave')."
            }
        ]
    },
    {
        "tool_name": "TrafficControlGetRoadDetails",
        "summary": "Gets the details of a road by its unique identifier.",
        "parameters": [
            {
                "name": "road_id",
                "type": "string",
                "description": "The unique identifier of the road to get details for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "road_details",
                "type": "object",
                "description": "The details of the road, includes fields such as 'name', 'type' (can only be 'road'), 'connected_roads' (an array of connected roads, each is an object containing 'road_id' and 'road_name')."
            }
        ]
    },
    {
        "tool_name": "TrafficControlGetIntersectionDetails",
        "summary": "Gets the details of an intersection by its unique identifier.",
        "parameters": [
            {
                "name": "intersection_id",
                "type": "string",
                "description": "The unique identifier of the intersection to get details for.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "intersection_details",
                "type": "object",
                "description": "The details of the intersection, includes fields such as 'name' (the name of the first road followed by the name of the second road, e.g., 'Main St and 1st Ave'), 'type' (can only be 'intersection'), 'connected_roads' (an array of connected roads, each is an object containing 'road_id' and 'road_name'), 'traffic_lights' (an array of objects containing 'traffic_light_type' which can be 'vehicle' or 'pedestrian', and 'traffic_light_id' which is the unique identifier of the traffic light concatenated by the type and the direction, e.g., 'vehicle-north-south', typically there will be two lights per intersection: 'north-south' for the north-south direction and 'east-west' for the east-west direction, and 'traffic_light_state' which can be 'red', 'green', 'yellow', or 'hazard' for 'vehicle' lights, and can be 'walk', 'stop', or 'flashing' for 'pedestrian' lights), "
            }
        ]
    },
    {
        "tool_name": "TrafficControlSearchRoute",
        "summary": "Searches for the optimal route between an origin and a destination.",
        "parameters": [
            {
                "name": "origin_id",
                "type": "string",
                "description": "The unique identifier of the origin location (road or intersection).",
                "required": true
            },
            {
                "name": "destination_id",
                "type": "string",
                "description": "The unique identifier of the destination location (road or intersection).",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of routes to return, optional, default is 1.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "routes",
                "type": "array",
                "description": "Each object contains 'route' (array of objects, each is a location in the route, contains 'location_id', 'location_name', and 'location_type', should be in order from origin to destination and interleave roads and intersections), and 'estimated_time' (string, the estimated time to travel the route in the format 'hh:mm:ss'). The number of objects in the array does not exceed `max_results`."
            }
        ]
    },
    {
        "tool_name": "TrafficControlCheckTrafficLightsStates",
        "summary": "Checks the current states of traffic lights (including both vehicle and pedestrian lights) at a specific intersection.",
        "parameters": [
            {
                "name": "intersection_id",
                "type": "string",
                "description": "The unique identifier of the intersection to check.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "light_states",
                "type": "array",
                "description": "A list of traffic light states, each is an object containing 'traffic_light_type' (can be 'vehicle' or 'pedestrian'), 'traffic_light_id' (the unique identifier of the traffic light concatenated by the type and the direction, e.g., 'vehicle-north-south', typically there will be two lights per intersection: 'north-south' for the north-south direction and 'east-west' for the east-west direction), and 'traffic_light_state' (for 'vehicle' lights, can be 'red', 'green', 'yellow', or 'hazard'; for 'pedestrian' lights, can be 'walk', 'stop', or 'flashing')."
            }
        ]
    },
    {
        "tool_name": "TrafficControlManageTrafficLightState",
        "summary": "Changes the state of a traffic light at a specific intersection, either immediately, or at a scheduled time.",
        "parameters": [
            {
                "name": "intersection_id",
                "type": "string",
                "description": "The unique identifier of the intersection where the traffic light is located.",
                "required": true
            },
            {
                "name": "traffic_light_id",
                "type": "string",
                "description": "The unique identifier of the traffic light to change concatenated by the type and the direction, e.g., 'vehicle-north-south'. The type can be 'vehicle' or 'pedestrian'. Typically there will be two lights per intersection: 'north-south' for the north-south direction and 'east-west' for the east-west direction.",
                "required": true
            },
            {
                "name": "traffic_light_state",
                "type": "string",
                "description": "The new state of the traffic light, for 'vehicle' lights, can be 'red', 'green', 'yellow', or 'hazard'; for 'pedestrian' lights, can be 'walk', 'stop', or 'flashing'.",
                "required": true
            },
            {
                "name": "start_time",
                "type": "string",
                "description": "The start time of the command in the format 'yyyy-mm-dd hh:mm:ss'. If not provided, the command takes effect immediately.",
                "required": false
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "The end time of the command in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "operation_success",
                "type": "boolean",
                "description": "Indicates whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "TrafficControlMonitorTrafficCongestion",
        "summary": "Monitors the traffic congestion level on a specific road or intersection.",
        "parameters": [
            {
                "name": "location_id",
                "type": "string",
                "description": "The unique identifier of the road or intersection to monitor.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "congestion_level",
                "type": "string",
                "description": "The level of traffic congestion, can only be 'low', 'medium', 'high', or 'severe'."
            }
        ]
    },
    {
        "tool_name": "TrafficControlPredictTrafficCongestion",
        "summary": "Predicts traffic congestion at a specific road or intersection in the future based on historical data and current conditions.",
        "parameters": [
            {
                "name": "location_id",
                "type": "string",
                "description": "The unique identifier of the road or intersection to predict congestion for.",
                "required": true
            },
            {
                "name": "prediction_start_time",
                "type": "string",
                "description": "The start time of the prediction in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            },
            {
                "name": "prediction_end_time",
                "type": "string",
                "description": "The end time of the prediction in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "predicted_congestion_level",
                "type": "string",
                "description": "The predicted level of traffic congestion, can only be 'low', 'medium', 'high', or 'severe'."
            }
        ]
    },
    {
        "tool_name": "TrafficControlAnalyzeTrafficPatterns",
        "summary": "Analyzes traffic patterns at a specific road or intersection over a specified period in the past.",
        "parameters": [
            {
                "name": "location_id",
                "type": "string",
                "description": "The unique identifier of the road or intersection to analyze.",
                "required": true
            },
            {
                "name": "start_time",
                "type": "string",
                "description": "The start time of the period in the past to analyze in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "The end time of the period in the past to analyze in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "analysis_result",
                "type": "object",
                "description": "The result of the traffic pattern analysis, includes fields such as 'average_congestion_level' (can only be 'low', 'medium', 'high', or 'severe'), 'peak_periods' (an array of objects with 'start_time' and 'end_time' fields, each in the format 'hh:mm') and 'low_periods' (an array of objects with 'start_time' and 'end_time' fields, each in the format 'hh:mm')."
            }
        ]
    },
    {
        "tool_name": "TrafficControlGivePriorityToEmergencyVehicle",
        "summary": "Gives priority to an emergency vehicle by changing vehicle lights at specific intersections.",
        "parameters": [
            {
                "name": "intersection_ids",
                "type": "array",
                "description": "The unique identifiers of the intersections where priority should be given.",
                "required": true
            },
            {
                "name": "start_time",
                "type": "string",
                "description": "The start time of the priority period in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "The end time of the priority period in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "operation_success",
                "type": "boolean",
                "description": "Indicates whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "TrafficControlGivePriorityToPublicTransportation",
        "summary": "Gives priority to a public transportation vehicle by changing vehicle lights at specific intersections during peak hours.",
        "parameters": [
            {
                "name": "intersection_ids",
                "type": "array",
                "description": "The unique identifiers of the intersections where priority should be given.",
                "required": true
            },
            {
                "name": "start_time",
                "type": "string",
                "description": "The start time of the priority period in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "The end time of the priority period in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "operation_success",
                "type": "boolean",
                "description": "Indicates whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "TrafficControlScheduleRoadMaintenance",
        "summary": "Schedules road maintenance at a specific road or intersection.",
        "parameters": [
            {
                "name": "location_id",
                "type": "string",
                "description": "The unique identifier of the road or intersection to schedule maintenance for.",
                "required": true
            },
            {
                "name": "start_time",
                "type": "string",
                "description": "The start time of the maintenance in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            },
            {
                "name": "end_time",
                "type": "string",
                "description": "The end time of the maintenance in the format 'yyyy-mm-dd hh:mm:ss'.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "operation_success",
                "type": "boolean",
                "description": "Indicates whether the operation was successful."
            }
        ]
    },
    {
        "tool_name": "TDAmeritradeGetHoldingsInformation",
        "summary": "Retrieve information about the holdings in an account that belongs to the User. ",
        "parameters": [
            {
                "name": "account",
                "type": "string",
                "description": "The account type, one of ['self-directed TFSA', 'self-directed non-registered'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "holdings",
                "type": "array",
                "description": "A list of objects containing the holding ticker (e.g. MSFT or AAPL) and the holding amount in USD."
            }
        ]
    },
    {
        "tool_name": "TDAmeritradeGetBalance",
        "summary": "Retrieve the balance of an account that belongs to the User.",
        "parameters": [
            {
                "name": "account",
                "type": "string",
                "description": "The account type, one of ['self-directed TFSA', 'self-directed non-registered'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "balance",
                "type": "number",
                "description": "The balance of the account in USD."
            }
        ]
    },
    {
        "tool_name": "TDAmeritradeTradeStock",
        "summary": "Places an order for a stock.",
        "parameters": [
            {
                "name": "account",
                "type": "string",
                "description": "The account number in which to purchase a stock. Must be a 'self-directed TFSA' account or a 'self-directed non-registered' account.",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "Whether to buy or sell the stock. One of ['buy', 'sell']",
                "required": true
            },
            {
                "name": "order_type",
                "type": "string",
                "description": "One of ['limit_order', 'market_order']",
                "required": true
            },
            {
                "name": "ticker",
                "type": "string",
                "description": "The ticker of the stock.",
                "required": true
            },
            {
                "name": "quantity",
                "type": "number",
                "description": "The number of shares to buy or sell.",
                "required": true
            },
            {
                "name": "price_limit",
                "type": "number",
                "description": "Only required for limit orders. The maximum or minimum price at which to buy or sell.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the order was successful placed."
            }
        ]
    },
    {
        "tool_name": "TDAmeritradeGetStockInformation",
        "summary": "Gets information about a stock.",
        "parameters": [
            {
                "name": "ticker",
                "type": "string",
                "description": "The ticker of the stock.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "stock_info",
                "type": "object",
                "description": "An object containing 'bid' (number, the bid price in USD), 'bid_lot_size' (integer, the bid lot size), 'ask' (number, the ask price in USD), 'ask_lot_size' (integer, the ask lot size), 'daily_volume' (integer, the daily volume)."
            }
        ]
    },
    {
        "tool_name": "InvestmentManagerGetHoldingsInformation",
        "summary": "Retrieve information about the holdings in an account that belongs to the User.",
        "parameters": [
            {
                "name": "account",
                "type": "string",
                "description": "The account type, one of ['non-registered', 'TFSA', 'RRSP'].",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "holdings",
                "type": "array",
                "description": "A list of objects, each containing 'type' (string, the type of the holding, e.g. cash, GIC, mutual fund or ETF), 'name' (string, the name of the holding), 'amount' (number, the total amount in USD), 'return' (number, the annualized return of the holding)."
            }
        ]
    },
    {
        "tool_name": "InvestmentManagerListTransactions",
        "summary": "Lists the transactions for a particular account.",
        "parameters": [
            {
                "name": "account",
                "type": "string",
                "description": "The account type, one of ['non-registered', 'TFSA', 'RRSP'].",
                "required": true
            },
            {
                "name": "start_date",
                "type": "string",
                "description": "The start date of the transactions in the format 'yyyy-mm-dd'. Default is the start of the account.",
                "required": false
            },
            {
                "name": "end_date",
                "type": "string",
                "description": "The end date of the transactions in the format 'yyyy-mm-dd'. Default is today.",
                "required": false
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return, default is 10, must be between 1 and 50.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "transactions",
                "type": "array",
                "description": "A list of objects containing the 'date' (string, in the format 'yyyy-mm-dd'), 'type' (string, the type of the holding, e.g. GIC, mutual fund or ETF), 'name' (string, the name of the holding), 'action' (string, one of ['buy', 'sell']), 'amount' (number, the amount in USD)."
            }
        ]
    },
    {
        "tool_name": "InvestmentManagerSearchInvestments",
        "summary": "Search available investments by keyword.",
        "parameters": [
            {
                "name": "query",
                "type": "string",
                "description": "The keyword to search for.",
                "required": true
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of investment to search for, e.g. 'mutual_fund', 'ETF', 'GIC'.",
                "required": true
            },
            {
                "name": "max_results",
                "type": "integer",
                "description": "The maximum number of results to return, default is 5, maximum is 10.",
                "required": false
            }
        ],
        "returns": [
            {
                "name": "investment_options",
                "type": "array",
                "description": "A list of objects, each object contains 'name' (string, the name of the investment option), 'description' (string, the description of the investment option), 'risk_disclosures' (object, detailed risk disclosures for this investment such as volatility and age suitability), 'min_purchase_amount' (number, the minimum amount that can be purchased in USD), 'return' (number, the annualized return of the fund)."
            }
        ]
    },
    {
        "tool_name": "InvestmentManagerMakeTransaction",
        "summary": "Buy investment options or sell holdings.",
        "parameters": [
            {
                "name": "account",
                "type": "string",
                "description": "The account type, one of ['non-registered', 'TFSA', 'RRSP'].",
                "required": true
            },
            {
                "name": "action",
                "type": "string",
                "description": "Whether to buy or sell the mutual fund. One of ['buy', 'sell']",
                "required": true
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the investment option to buy or the holding to sell.",
                "required": true
            },
            {
                "name": "amount",
                "type": "number",
                "description": "The total amount to be purchased, in USD.",
                "required": true
            }
        ],
        "returns": [
            {
                "name": "success",
                "type": "boolean",
                "description": "Whether the transaction was successful."
            }
        ]
    }
]